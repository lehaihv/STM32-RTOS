
Binary_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006730  08006730  00007730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006834  08006834  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006834  08006834  00007834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800683c  0800683c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800683c  0800683c  0000783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006840  08006840  00007840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006844  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be0  20000068  080068ac  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c48  080068ac  00008c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae50  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003605  00000000  00000000  00022ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000264f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001172  00000000  00000000  00027b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032e2  00000000  00000000  00028cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001886b  00000000  00000000  0002bfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc70e  00000000  00000000  00044817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140f25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b4  00000000  00000000  00140f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014711c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006718 	.word	0x08006718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006718 	.word	0x08006718

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 faac 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f83a 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8ba 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f888 	bl	80005e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004d4:	f003 f906 	bl	80036e4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 1, &BinarySem01_attributes);
 80004d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000518 <main+0x58>)
 80004da:	2101      	movs	r1, #1
 80004dc:	2001      	movs	r0, #1
 80004de:	f003 f9f8 	bl	80038d2 <osSemaphoreNew>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <main+0x5c>)
 80004e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, (void*) msg1, &Task1_attributes);
 80004e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <main+0x60>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <main+0x64>)
 80004ee:	4619      	mov	r1, r3
 80004f0:	480d      	ldr	r0, [pc, #52]	@ (8000528 <main+0x68>)
 80004f2:	f003 f941 	bl	8003778 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a0c      	ldr	r2, [pc, #48]	@ (800052c <main+0x6c>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, (void*) msg2, &Task2_attributes);
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <main+0x70>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <main+0x74>)
 8000502:	4619      	mov	r1, r3
 8000504:	480c      	ldr	r0, [pc, #48]	@ (8000538 <main+0x78>)
 8000506:	f003 f937 	bl	8003778 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0b      	ldr	r2, [pc, #44]	@ (800053c <main+0x7c>)
 800050e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000510:	f003 f90c 	bl	800372c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <main+0x54>
 8000518:	080067dc 	.word	0x080067dc
 800051c:	20000114 	.word	0x20000114
 8000520:	20000000 	.word	0x20000000
 8000524:	08006794 	.word	0x08006794
 8000528:	08000711 	.word	0x08000711
 800052c:	2000010c 	.word	0x2000010c
 8000530:	20000004 	.word	0x20000004
 8000534:	080067b8 	.word	0x080067b8
 8000538:	08000721 	.word	0x08000721
 800053c:	20000110 	.word	0x20000110

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	@ 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	@ 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f005 fffa 	bl	8006548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000566:	f000 fd4d 	bl	8001004 <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 f8f0 	bl	8000754 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fd84 	bl	80010b0 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 f8d1 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f94c 	bl	8001868 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 f8bd 	bl	8000754 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	@ 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <MX_USART2_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_USART2_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000628:	f002 faf6 	bl	8002c18 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f88f 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000084 	.word	0x20000084
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a2a      	ldr	r2, [pc, #168]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a24      	ldr	r2, [pc, #144]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a1e      	ldr	r2, [pc, #120]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a18      	ldr	r2, [pc, #96]	@ (8000708 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2120      	movs	r1, #32
 80006be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c2:	f000 fc79 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	480b      	ldr	r0, [pc, #44]	@ (800070c <MX_GPIO_Init+0xc8>)
 80006de:	f000 fac1 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006e2:	2320      	movs	r3, #32
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fc:	f000 fab2 	bl	8000c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	@ 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800

08000710 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000718:	2001      	movs	r0, #1
 800071a:	f003 f8bf 	bl	800389c <osDelay>
 800071e:	e7fb      	b.n	8000718 <StartTask1+0x8>

08000720 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f003 f8b7 	bl	800389c <osDelay>
 800072e:	e7fb      	b.n	8000728 <StartTask2+0x8>

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f000 f98d 	bl	8000a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40001000 	.word	0x40001000

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <HAL_MspInit+0x4c>)
 8000768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800076a:	4a10      	ldr	r2, [pc, #64]	@ (80007ac <HAL_MspInit+0x4c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6613      	str	r3, [r2, #96]	@ 0x60
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <HAL_MspInit+0x4c>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <HAL_MspInit+0x4c>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000782:	4a0a      	ldr	r2, [pc, #40]	@ (80007ac <HAL_MspInit+0x4c>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000788:	6593      	str	r3, [r2, #88]	@ 0x58
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <HAL_MspInit+0x4c>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800078e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	210f      	movs	r1, #15
 800079a:	f06f 0001 	mvn.w	r0, #1
 800079e:	f000 fa37 	bl	8000c10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0ac      	sub	sp, #176	@ 0xb0
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2288      	movs	r2, #136	@ 0x88
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f005 feb9 	bl	8006548 <memset>
  if(huart->Instance==USART2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a21      	ldr	r2, [pc, #132]	@ (8000860 <HAL_UART_MspInit+0xb0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d13b      	bne.n	8000858 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fa91 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007f8:	f7ff ffac 	bl	8000754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <HAL_UART_MspInit+0xb4>)
 80007fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000800:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <HAL_UART_MspInit+0xb4>)
 8000802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000806:	6593      	str	r3, [r2, #88]	@ 0x58
 8000808:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <HAL_UART_MspInit+0xb4>)
 800080a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <HAL_UART_MspInit+0xb4>)
 8000816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000818:	4a12      	ldr	r2, [pc, #72]	@ (8000864 <HAL_UART_MspInit+0xb4>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000820:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <HAL_UART_MspInit+0xb4>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082c:	230c      	movs	r3, #12
 800082e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000844:	2307      	movs	r3, #7
 8000846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f000 fa06 	bl	8000c64 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000858:	bf00      	nop
 800085a:	37b0      	adds	r7, #176	@ 0xb0
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40004400 	.word	0x40004400
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08e      	sub	sp, #56	@ 0x38
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000876:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <HAL_InitTick+0xe0>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	4a33      	ldr	r2, [pc, #204]	@ (8000948 <HAL_InitTick+0xe0>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6593      	str	r3, [r2, #88]	@ 0x58
 8000882:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <HAL_InitTick+0xe0>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800088e:	f107 0210 	add.w	r2, r7, #16
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f001 f9a9 	bl	8001bf0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008a8:	f001 f976 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 80008ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80008ae:	e004      	b.n	80008ba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008b0:	f001 f972 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 80008b4:	4603      	mov	r3, r0
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008bc:	4a23      	ldr	r2, [pc, #140]	@ (800094c <HAL_InitTick+0xe4>)
 80008be:	fba2 2303 	umull	r2, r3, r2, r3
 80008c2:	0c9b      	lsrs	r3, r3, #18
 80008c4:	3b01      	subs	r3, #1
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <HAL_InitTick+0xe8>)
 80008ca:	4a22      	ldr	r2, [pc, #136]	@ (8000954 <HAL_InitTick+0xec>)
 80008cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <HAL_InitTick+0xe8>)
 80008d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <HAL_InitTick+0xe8>)
 80008d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HAL_InitTick+0xe8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <HAL_InitTick+0xe8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <HAL_InitTick+0xe8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008ee:	4818      	ldr	r0, [pc, #96]	@ (8000950 <HAL_InitTick+0xe8>)
 80008f0:	f001 fecc 	bl	800268c <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d11b      	bne.n	800093a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000902:	4813      	ldr	r0, [pc, #76]	@ (8000950 <HAL_InitTick+0xe8>)
 8000904:	f001 ff24 	bl	8002750 <HAL_TIM_Base_Start_IT>
 8000908:	4603      	mov	r3, r0
 800090a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800090e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000912:	2b00      	cmp	r3, #0
 8000914:	d111      	bne.n	800093a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000916:	2036      	movs	r0, #54	@ 0x36
 8000918:	f000 f996 	bl	8000c48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b0f      	cmp	r3, #15
 8000920:	d808      	bhi.n	8000934 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000922:	2200      	movs	r2, #0
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	2036      	movs	r0, #54	@ 0x36
 8000928:	f000 f972 	bl	8000c10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092c:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <HAL_InitTick+0xf0>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	e002      	b.n	800093a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800093a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800093e:	4618      	mov	r0, r3
 8000940:	3738      	adds	r7, #56	@ 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	431bde83 	.word	0x431bde83
 8000950:	20000118 	.word	0x20000118
 8000954:	40001000 	.word	0x40001000
 8000958:	2000000c 	.word	0x2000000c

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <NMI_Handler+0x4>

08000964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <MemManage_Handler+0x4>

08000974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <UsageFault_Handler+0x4>

08000984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <TIM6_DAC_IRQHandler+0x10>)
 800099a:	f001 ff49 	bl	8002830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000118 	.word	0x20000118

080009a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d0:	f7ff ffea 	bl	80009a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80009d6:	490d      	ldr	r1, [pc, #52]	@ (8000a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <LoopForever+0xe>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000a18 <LoopForever+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f005 fe03 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009fe:	f7ff fd5f 	bl	80004c0 <main>

08000a02 <LoopForever>:

LoopForever:
    b LoopForever
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a04:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a10:	08006844 	.word	0x08006844
  ldr r2, =_sbss
 8000a14:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a18:	20001c48 	.word	0x20001c48

08000a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_2_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <HAL_Init+0x3c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <HAL_Init+0x3c>)
 8000a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a36:	2003      	movs	r0, #3
 8000a38:	f000 f8df 	bl	8000bfa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	f7ff ff13 	bl	8000868 <HAL_InitTick>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	e001      	b.n	8000a52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a4e:	f7ff fe87 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a52:	79fb      	ldrb	r3, [r7, #7]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40022000 	.word	0x40022000

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000010 	.word	0x20000010
 8000a84:	20000164 	.word	0x20000164

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000164 	.word	0x20000164

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4907      	ldr	r1, [pc, #28]	@ (8000b3c <__NVIC_EnableIRQ+0x38>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	@ (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	@ (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	@ 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	@ 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ff4c 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c22:	f7ff ff61 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	68b9      	ldr	r1, [r7, #8]
 8000c2c:	6978      	ldr	r0, [r7, #20]
 8000c2e:	f7ff ffb1 	bl	8000b94 <NVIC_EncodePriority>
 8000c32:	4602      	mov	r2, r0
 8000c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff80 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c40:	bf00      	nop
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff54 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	e17f      	b.n	8000f74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 8171 	beq.w	8000f6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d005      	beq.n	8000ca4 <HAL_GPIO_Init+0x40>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d130      	bne.n	8000d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	2203      	movs	r2, #3
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cda:	2201      	movs	r2, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	f003 0201 	and.w	r2, r3, #1
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d118      	bne.n	8000d44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	f003 0201 	and.w	r2, r3, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d017      	beq.n	8000d80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d123      	bne.n	8000dd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	6939      	ldr	r1, [r7, #16]
 8000dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0203 	and.w	r2, r3, #3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80ac 	beq.w	8000f6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b5f      	ldr	r3, [pc, #380]	@ (8000f94 <HAL_GPIO_Init+0x330>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1a:	4a5e      	ldr	r2, [pc, #376]	@ (8000f94 <HAL_GPIO_Init+0x330>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e22:	4b5c      	ldr	r3, [pc, #368]	@ (8000f94 <HAL_GPIO_Init+0x330>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e2e:	4a5a      	ldr	r2, [pc, #360]	@ (8000f98 <HAL_GPIO_Init+0x334>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e58:	d025      	beq.n	8000ea6 <HAL_GPIO_Init+0x242>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f9c <HAL_GPIO_Init+0x338>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01f      	beq.n	8000ea2 <HAL_GPIO_Init+0x23e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa0 <HAL_GPIO_Init+0x33c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x23a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa4 <HAL_GPIO_Init+0x340>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x236>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa8 <HAL_GPIO_Init+0x344>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x232>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8000fac <HAL_GPIO_Init+0x348>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x22e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	@ (8000fb0 <HAL_GPIO_Init+0x34c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x22a>
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	e00c      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e8e:	2307      	movs	r3, #7
 8000e90:	e00a      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e92:	2305      	movs	r3, #5
 8000e94:	e008      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e004      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <HAL_GPIO_Init+0x244>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	f002 0203 	and.w	r2, r2, #3
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4093      	lsls	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb8:	4937      	ldr	r1, [pc, #220]	@ (8000f98 <HAL_GPIO_Init+0x334>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eea:	4a32      	ldr	r2, [pc, #200]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f14:	4a27      	ldr	r2, [pc, #156]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f68:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <HAL_GPIO_Init+0x350>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f47f ae78 	bne.w	8000c74 <HAL_GPIO_Init+0x10>
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000c00 	.word	0x48000c00
 8000fa8:	48001000 	.word	0x48001000
 8000fac:	48001400 	.word	0x48001400
 8000fb0:	48001800 	.word	0x48001800
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40007000 	.word	0x40007000

08001004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001012:	d130      	bne.n	8001076 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001014:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800101c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001020:	d038      	beq.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001022:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800102a:	4a1e      	ldr	r2, [pc, #120]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001030:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2232      	movs	r2, #50	@ 0x32
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0c9b      	lsrs	r3, r3, #18
 8001044:	3301      	adds	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001048:	e002      	b.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3b01      	subs	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800105c:	d102      	bne.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x60>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f2      	bne.n	800104a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001064:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800106c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001070:	d110      	bne.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e00f      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001082:	d007      	beq.n	8001094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800108c:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001092:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40007000 	.word	0x40007000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	431bde83 	.word	0x431bde83

080010b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e3ca      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010c2:	4b97      	ldr	r3, [pc, #604]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010cc:	4b94      	ldr	r3, [pc, #592]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80e4 	beq.w	80012ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_RCC_OscConfig+0x4a>
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	2b0c      	cmp	r3, #12
 80010ee:	f040 808b 	bne.w	8001208 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	f040 8087 	bne.w	8001208 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010fa:	4b89      	ldr	r3, [pc, #548]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_RCC_OscConfig+0x62>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e3a2      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1a      	ldr	r2, [r3, #32]
 8001116:	4b82      	ldr	r3, [pc, #520]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <HAL_RCC_OscConfig+0x7c>
 8001122:	4b7f      	ldr	r3, [pc, #508]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800112a:	e005      	b.n	8001138 <HAL_RCC_OscConfig+0x88>
 800112c:	4b7c      	ldr	r3, [pc, #496]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800112e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001138:	4293      	cmp	r3, r2
 800113a:	d223      	bcs.n	8001184 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fd87 	bl	8001c54 <RCC_SetFlashLatencyFromMSIRange>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e383      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001150:	4b73      	ldr	r3, [pc, #460]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a72      	ldr	r2, [pc, #456]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001156:	f043 0308 	orr.w	r3, r3, #8
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	4b70      	ldr	r3, [pc, #448]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	496d      	ldr	r1, [pc, #436]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116e:	4b6c      	ldr	r3, [pc, #432]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	4968      	ldr	r1, [pc, #416]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800117e:	4313      	orrs	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
 8001182:	e025      	b.n	80011d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001184:	4b66      	ldr	r3, [pc, #408]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a65      	ldr	r2, [pc, #404]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b63      	ldr	r3, [pc, #396]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4960      	ldr	r1, [pc, #384]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	495b      	ldr	r1, [pc, #364]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fd47 	bl	8001c54 <RCC_SetFlashLatencyFromMSIRange>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e343      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011d0:	f000 fc4a 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b52      	ldr	r3, [pc, #328]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	4950      	ldr	r1, [pc, #320]	@ (8001324 <HAL_RCC_OscConfig+0x274>)
 80011e2:	5ccb      	ldrb	r3, [r1, r3]
 80011e4:	f003 031f 	and.w	r3, r3, #31
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001328 <HAL_RCC_OscConfig+0x278>)
 80011ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011f0:	4b4e      	ldr	r3, [pc, #312]	@ (800132c <HAL_RCC_OscConfig+0x27c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fb37 	bl	8000868 <HAL_InitTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d052      	beq.n	80012aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	e327      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d032      	beq.n	8001276 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001210:	4b43      	ldr	r3, [pc, #268]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a42      	ldr	r2, [pc, #264]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800121c:	f7ff fc34 	bl	8000a88 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001224:	f7ff fc30 	bl	8000a88 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e310      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001236:	4b3a      	ldr	r3, [pc, #232]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001242:	4b37      	ldr	r3, [pc, #220]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a36      	ldr	r2, [pc, #216]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4931      	ldr	r1, [pc, #196]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001260:	4b2f      	ldr	r3, [pc, #188]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	492c      	ldr	r1, [pc, #176]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
 8001274:	e01a      	b.n	80012ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001282:	f7ff fc01 	bl	8000a88 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800128a:	f7ff fbfd 	bl	8000a88 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e2dd      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800129c:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x1da>
 80012a8:	e000      	b.n	80012ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d074      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x21a>
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d10e      	bne.n	80012e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d064      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d160      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e2ba      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x24a>
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e026      	b.n	8001348 <HAL_RCC_OscConfig+0x298>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001302:	d115      	bne.n	8001330 <HAL_RCC_OscConfig+0x280>
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 800130a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a02      	ldr	r2, [pc, #8]	@ (8001320 <HAL_RCC_OscConfig+0x270>)
 8001316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e014      	b.n	8001348 <HAL_RCC_OscConfig+0x298>
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	080067ec 	.word	0x080067ec
 8001328:	20000008 	.word	0x20000008
 800132c:	2000000c 	.word	0x2000000c
 8001330:	4ba0      	ldr	r3, [pc, #640]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a9f      	ldr	r2, [pc, #636]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b9d      	ldr	r3, [pc, #628]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a9c      	ldr	r2, [pc, #624]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fb9a 	bl	8000a88 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fb96 	bl	8000a88 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	@ 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e276      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800136a:	4b92      	ldr	r3, [pc, #584]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x2a8>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fb86 	bl	8000a88 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fb82 	bl	8000a88 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	@ 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e262      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001392:	4b88      	ldr	r3, [pc, #544]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x2d0>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d060      	beq.n	8001470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x310>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d119      	bne.n	80013ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d116      	bne.n	80013ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c0:	4b7c      	ldr	r3, [pc, #496]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x328>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e23f      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b76      	ldr	r3, [pc, #472]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	4973      	ldr	r1, [pc, #460]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ec:	e040      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d023      	beq.n	800143e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f6:	4b6f      	ldr	r3, [pc, #444]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6e      	ldr	r2, [pc, #440]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fb41 	bl	8000a88 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fb3d 	bl	8000a88 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e21d      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141c:	4b65      	ldr	r3, [pc, #404]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b62      	ldr	r3, [pc, #392]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	061b      	lsls	r3, r3, #24
 8001436:	495f      	ldr	r1, [pc, #380]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
 800143c:	e018      	b.n	8001470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b5d      	ldr	r3, [pc, #372]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a5c      	ldr	r2, [pc, #368]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fb1d 	bl	8000a88 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fb19 	bl	8000a88 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e1f9      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001464:	4b53      	ldr	r3, [pc, #332]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f0      	bne.n	8001452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d03c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01c      	beq.n	80014be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001484:	4b4b      	ldr	r3, [pc, #300]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800148a:	4a4a      	ldr	r2, [pc, #296]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001494:	f7ff faf8 	bl	8000a88 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff faf4 	bl	8000a88 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1d4      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ae:	4b41      	ldr	r3, [pc, #260]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ef      	beq.n	800149c <HAL_RCC_OscConfig+0x3ec>
 80014bc:	e01b      	b.n	80014f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c4:	4a3b      	ldr	r2, [pc, #236]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff fadb 	bl	8000a88 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fad7 	bl	8000a88 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1b7      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e8:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80014ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ef      	bne.n	80014d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80a6 	beq.w	8001650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001508:	4b2a      	ldr	r3, [pc, #168]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10d      	bne.n	8001530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	4a26      	ldr	r2, [pc, #152]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800151a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152c:	2301      	movs	r3, #1
 800152e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d118      	bne.n	800156e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <HAL_RCC_OscConfig+0x508>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001548:	f7ff fa9e 	bl	8000a88 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001550:	f7ff fa9a 	bl	8000a88 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e17a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_RCC_OscConfig+0x508>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_RCC_OscConfig+0x4d8>
 8001576:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001586:	e029      	b.n	80015dc <HAL_RCC_OscConfig+0x52c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d115      	bne.n	80015bc <HAL_RCC_OscConfig+0x50c>
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001596:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a6:	4a03      	ldr	r2, [pc, #12]	@ (80015b4 <HAL_RCC_OscConfig+0x504>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b0:	e014      	b.n	80015dc <HAL_RCC_OscConfig+0x52c>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40007000 	.word	0x40007000
 80015bc:	4b9c      	ldr	r3, [pc, #624]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c2:	4a9b      	ldr	r2, [pc, #620]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015cc:	4b98      	ldr	r3, [pc, #608]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80015ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d2:	4a97      	ldr	r2, [pc, #604]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d016      	beq.n	8001612 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fa50 	bl	8000a88 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fa4c 	bl	8000a88 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e12a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001602:	4b8b      	ldr	r3, [pc, #556]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ed      	beq.n	80015ec <HAL_RCC_OscConfig+0x53c>
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fa39 	bl	8000a88 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fa35 	bl	8000a88 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e113      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001630:	4b7f      	ldr	r3, [pc, #508]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ed      	bne.n	800161a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b7a      	ldr	r3, [pc, #488]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	4a79      	ldr	r2, [pc, #484]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80fe 	beq.w	8001856 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165e:	2b02      	cmp	r3, #2
 8001660:	f040 80d0 	bne.w	8001804 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001664:	4b72      	ldr	r3, [pc, #456]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001674:	429a      	cmp	r2, r3
 8001676:	d130      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	3b01      	subs	r3, #1
 8001684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d127      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001694:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d11f      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016a4:	2a07      	cmp	r2, #7
 80016a6:	bf14      	ite	ne
 80016a8:	2201      	movne	r2, #1
 80016aa:	2200      	moveq	r2, #0
 80016ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d113      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d109      	bne.n	80016da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	3b01      	subs	r3, #1
 80016d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d06e      	beq.n	80017b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b0c      	cmp	r3, #12
 80016de:	d069      	beq.n	80017b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016e0:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016ec:	4b50      	ldr	r3, [pc, #320]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0ad      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a4b      	ldr	r2, [pc, #300]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001702:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001706:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001708:	f7ff f9be 	bl	8000a88 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f9ba 	bl	8000a88 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e09a      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001722:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800172e:	4b40      	ldr	r3, [pc, #256]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	4b40      	ldr	r3, [pc, #256]	@ (8001834 <HAL_RCC_OscConfig+0x784>)
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800173e:	3a01      	subs	r2, #1
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001748:	0212      	lsls	r2, r2, #8
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001750:	0852      	lsrs	r2, r2, #1
 8001752:	3a01      	subs	r2, #1
 8001754:	0552      	lsls	r2, r2, #21
 8001756:	4311      	orrs	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800175c:	0852      	lsrs	r2, r2, #1
 800175e:	3a01      	subs	r2, #1
 8001760:	0652      	lsls	r2, r2, #25
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001768:	0912      	lsrs	r2, r2, #4
 800176a:	0452      	lsls	r2, r2, #17
 800176c:	430a      	orrs	r2, r1
 800176e:	4930      	ldr	r1, [pc, #192]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001774:	4b2e      	ldr	r3, [pc, #184]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2d      	ldr	r2, [pc, #180]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 800177a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800177e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001780:	4b2b      	ldr	r3, [pc, #172]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4a2a      	ldr	r2, [pc, #168]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800178a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800178c:	f7ff f97c 	bl	8000a88 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff f978 	bl	8000a88 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e058      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a6:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017b2:	e050      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e04f      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d148      	bne.n	8001856 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a16      	ldr	r2, [pc, #88]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017dc:	f7ff f954 	bl	8000a88 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff f950 	bl	8000a88 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e030      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x734>
 8001802:	e028      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d023      	beq.n	8001852 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_RCC_OscConfig+0x780>)
 8001810:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff f937 	bl	8000a88 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181c:	e00c      	b.n	8001838 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181e:	f7ff f933 	bl	8000a88 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d905      	bls.n	8001838 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
 8001830:	40021000 	.word	0x40021000
 8001834:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_OscConfig+0x7b0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ec      	bne.n	800181e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_RCC_OscConfig+0x7b0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	4905      	ldr	r1, [pc, #20]	@ (8001860 <HAL_RCC_OscConfig+0x7b0>)
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_RCC_OscConfig+0x7b4>)
 800184c:	4013      	ands	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
 8001850:	e001      	b.n	8001856 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	feeefffc 	.word	0xfeeefffc

08001868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0e7      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b75      	ldr	r3, [pc, #468]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d910      	bls.n	80018ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b72      	ldr	r3, [pc, #456]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 0207 	bic.w	r2, r3, #7
 8001892:	4970      	ldr	r1, [pc, #448]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b6e      	ldr	r3, [pc, #440]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0cf      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b66      	ldr	r3, [pc, #408]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d908      	bls.n	80018da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4960      	ldr	r1, [pc, #384]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d04c      	beq.n	8001980 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d121      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0a6      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	4b54      	ldr	r3, [pc, #336]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d115      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e09a      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e08e      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e086      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800193e:	4b46      	ldr	r3, [pc, #280]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4943      	ldr	r1, [pc, #268]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7ff f89a 	bl	8000a88 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	e00a      	b.n	800196e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001958:	f7ff f896 	bl	8000a88 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e06e      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 020c 	and.w	r2, r3, #12
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1eb      	bne.n	8001958 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d010      	beq.n	80019ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001998:	429a      	cmp	r2, r3
 800199a:	d208      	bcs.n	80019ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	492b      	ldr	r1, [pc, #172]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ae:	4b29      	ldr	r3, [pc, #164]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d210      	bcs.n	80019de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019bc:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 0207 	bic.w	r2, r3, #7
 80019c4:	4923      	ldr	r1, [pc, #140]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_RCC_ClockConfig+0x1ec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e036      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d008      	beq.n	80019fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4918      	ldr	r1, [pc, #96]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4910      	ldr	r1, [pc, #64]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a1c:	f000 f824 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <HAL_RCC_ClockConfig+0x1f0>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	490b      	ldr	r1, [pc, #44]	@ (8001a5c <HAL_RCC_ClockConfig+0x1f4>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
 8001a38:	4a09      	ldr	r2, [pc, #36]	@ (8001a60 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_RCC_ClockConfig+0x1fc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe ff11 	bl	8000868 <HAL_InitTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	080067ec 	.word	0x080067ec
 8001a60:	20000008 	.word	0x20000008
 8001a64:	2000000c 	.word	0x2000000c

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	@ 0x24
 8001a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a80:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x34>
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d121      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d11e      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001aa8:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	e005      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	e004      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d134      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001af6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d003      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0xac>
 8001b0c:	e005      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b10:	617b      	str	r3, [r7, #20]
      break;
 8001b12:	e005      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b16:	617b      	str	r3, [r7, #20]
      break;
 8001b18:	e002      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	617b      	str	r3, [r7, #20]
      break;
 8001b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	fb03 f202 	mul.w	r2, r3, r2
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	0e5b      	lsrs	r3, r3, #25
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	3301      	adds	r3, #1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b60:	69bb      	ldr	r3, [r7, #24]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08006804 	.word	0x08006804
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	007a1200 	.word	0x007a1200

08001b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4904      	ldr	r1, [pc, #16]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	080067fc 	.word	0x080067fc

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bc8:	f7ff ffda 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0adb      	lsrs	r3, r3, #11
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4904      	ldr	r1, [pc, #16]	@ (8001bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	080067fc 	.word	0x080067fc

08001bf0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c24:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <HAL_RCC_GetClockConfig+0x60>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0207 	and.w	r2, r3, #7
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40022000 	.word	0x40022000

08001c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c60:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c6c:	f7ff f9bc 	bl	8000fe8 <HAL_PWREx_GetVoltageRange>
 8001c70:	6178      	str	r0, [r7, #20]
 8001c72:	e014      	b.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	4a24      	ldr	r2, [pc, #144]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c80:	4b22      	ldr	r3, [pc, #136]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c8c:	f7ff f9ac 	bl	8000fe8 <HAL_PWREx_GetVoltageRange>
 8001c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	4a1d      	ldr	r2, [pc, #116]	@ (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ca4:	d10b      	bne.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b80      	cmp	r3, #128	@ 0x80
 8001caa:	d919      	bls.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cb0:	d902      	bls.n	8001cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	e013      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb8:	2301      	movs	r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e010      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b80      	cmp	r3, #128	@ 0x80
 8001cc2:	d902      	bls.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e00a      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b80      	cmp	r3, #128	@ 0x80
 8001cce:	d102      	bne.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	e004      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b70      	cmp	r3, #112	@ 0x70
 8001cda:	d101      	bne.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 0207 	bic.w	r2, r3, #7
 8001ce8:	4909      	ldr	r1, [pc, #36]	@ (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cf0:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40022000 	.word	0x40022000

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d20:	2300      	movs	r3, #0
 8001d22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d041      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d38:	d02a      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d3e:	d824      	bhi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d44:	d008      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d4a:	d81e      	bhi.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d54:	d010      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d56:	e018      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d58:	4b86      	ldr	r3, [pc, #536]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a85      	ldr	r2, [pc, #532]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d64:	e015      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fabb 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8001d72:	4603      	mov	r3, r0
 8001d74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d76:	e00c      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3320      	adds	r3, #32
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fba6 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d88:	e003      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d8e:	e000      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10b      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d98:	4b76      	ldr	r3, [pc, #472]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001da6:	4973      	ldr	r1, [pc, #460]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dae:	e001      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
 8001db2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d041      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dc8:	d02a      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001dca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001dce:	d824      	bhi.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001dd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001dd4:	d008      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001dda:	d81e      	bhi.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d010      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001de6:	e018      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de8:	4b62      	ldr	r3, [pc, #392]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a61      	ldr	r2, [pc, #388]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001df4:	e015      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fa73 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8001e02:	4603      	mov	r3, r0
 8001e04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e06:	e00c      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3320      	adds	r3, #32
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fb5e 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e18:	e003      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e1e:	e000      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e22:	7cfb      	ldrb	r3, [r7, #19]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e28:	4b52      	ldr	r3, [pc, #328]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e36:	494f      	ldr	r1, [pc, #316]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e3e:	e001      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a0 	beq.w	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e56:	4b47      	ldr	r3, [pc, #284]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b41      	ldr	r3, [pc, #260]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e70:	4a40      	ldr	r2, [pc, #256]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e78:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e84:	2301      	movs	r3, #1
 8001e86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e88:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e94:	f7fe fdf8 	bl	8000a88 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e9a:	e009      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9c:	f7fe fdf4 	bl	8000a88 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d902      	bls.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	74fb      	strb	r3, [r7, #19]
        break;
 8001eae:	e005      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eb0:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d15c      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ecc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01f      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d019      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	4a20      	ldr	r2, [pc, #128]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f0c:	4a19      	ldr	r2, [pc, #100]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d016      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fdb3 	bl	8000a88 <HAL_GetTick>
 8001f22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f24:	e00b      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe fdaf 	bl	8000a88 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d902      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f3c:	e006      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ec      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f62:	4904      	ldr	r1, [pc, #16]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f6a:	e009      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	74bb      	strb	r3, [r7, #18]
 8001f70:	e006      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f80:	7c7b      	ldrb	r3, [r7, #17]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b9e      	ldr	r3, [pc, #632]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	4a9d      	ldr	r2, [pc, #628]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f9e:	4b98      	ldr	r3, [pc, #608]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fac:	4994      	ldr	r1, [pc, #592]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	f023 020c 	bic.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fce:	498c      	ldr	r1, [pc, #560]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fe2:	4b87      	ldr	r3, [pc, #540]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	4983      	ldr	r1, [pc, #524]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002004:	4b7e      	ldr	r3, [pc, #504]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	497b      	ldr	r1, [pc, #492]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002026:	4b76      	ldr	r3, [pc, #472]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002034:	4972      	ldr	r1, [pc, #456]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002048:	4b6d      	ldr	r3, [pc, #436]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	496a      	ldr	r1, [pc, #424]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002070:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	4961      	ldr	r1, [pc, #388]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800208c:	4b5c      	ldr	r3, [pc, #368]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209a:	4959      	ldr	r1, [pc, #356]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ae:	4b54      	ldr	r3, [pc, #336]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020bc:	4950      	ldr	r1, [pc, #320]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	4948      	ldr	r1, [pc, #288]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020f2:	4b43      	ldr	r3, [pc, #268]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	493f      	ldr	r1, [pc, #252]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d028      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002114:	4b3a      	ldr	r3, [pc, #232]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002122:	4937      	ldr	r1, [pc, #220]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002132:	d106      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002134:	4b32      	ldr	r3, [pc, #200]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a31      	ldr	r2, [pc, #196]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800213e:	60d3      	str	r3, [r2, #12]
 8002140:	e011      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800214a:	d10c      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f8c8 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d028      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002172:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002178:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	491f      	ldr	r1, [pc, #124]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002190:	d106      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4a1a      	ldr	r2, [pc, #104]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800219c:	60d3      	str	r3, [r2, #12]
 800219e:	e011      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2101      	movs	r1, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f899 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 80021b6:	4603      	mov	r3, r0
 80021b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02b      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021de:	4908      	ldr	r1, [pc, #32]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ee:	d109      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a02      	ldr	r2, [pc, #8]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
 80021fc:	e014      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800220c:	d10c      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f000 f867 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02f      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002234:	4b2b      	ldr	r3, [pc, #172]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002242:	4928      	ldr	r1, [pc, #160]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800224e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002252:	d10d      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3304      	adds	r3, #4
 8002258:	2102      	movs	r1, #2
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f844 	bl	80022e8 <RCCEx_PLLSAI1_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d014      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	74bb      	strb	r3, [r7, #18]
 800226e:	e011      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002278:	d10c      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3320      	adds	r3, #32
 800227e:	2102      	movs	r1, #2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f925 	bl	80024d0 <RCCEx_PLLSAI2_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022a0:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022ae:	490d      	ldr	r1, [pc, #52]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022d2:	4904      	ldr	r1, [pc, #16]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022da:	7cbb      	ldrb	r3, [r7, #18]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022f6:	4b75      	ldr	r3, [pc, #468]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d018      	beq.n	8002334 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002302:	4b72      	ldr	r3, [pc, #456]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d10d      	bne.n	800232e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
       ||
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800231a:	4b6c      	ldr	r3, [pc, #432]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
       ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d047      	beq.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e044      	b.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d018      	beq.n	800236e <RCCEx_PLLSAI1_Config+0x86>
 800233c:	2b03      	cmp	r3, #3
 800233e:	d825      	bhi.n	800238c <RCCEx_PLLSAI1_Config+0xa4>
 8002340:	2b01      	cmp	r3, #1
 8002342:	d002      	beq.n	800234a <RCCEx_PLLSAI1_Config+0x62>
 8002344:	2b02      	cmp	r3, #2
 8002346:	d009      	beq.n	800235c <RCCEx_PLLSAI1_Config+0x74>
 8002348:	e020      	b.n	800238c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800234a:	4b60      	ldr	r3, [pc, #384]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d11d      	bne.n	8002392 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235a:	e01a      	b.n	8002392 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800235c:	4b5b      	ldr	r3, [pc, #364]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d116      	bne.n	8002396 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236c:	e013      	b.n	8002396 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800236e:	4b57      	ldr	r3, [pc, #348]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800237a:	4b54      	ldr	r3, [pc, #336]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800238a:	e006      	b.n	800239a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e004      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002392:	bf00      	nop
 8002394:	e002      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800239a:	bf00      	nop
    }

    if(status == HAL_OK)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023a2:	4b4a      	ldr	r3, [pc, #296]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	430b      	orrs	r3, r1
 80023b8:	4944      	ldr	r1, [pc, #272]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d17d      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023c4:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a40      	ldr	r2, [pc, #256]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7fe fb5a 	bl	8000a88 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023d6:	e009      	b.n	80023ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d8:	f7fe fb56 	bl	8000a88 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d902      	bls.n	80023ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	73fb      	strb	r3, [r7, #15]
        break;
 80023ea:	e005      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ec:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ef      	bne.n	80023d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d160      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d111      	bne.n	8002428 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002404:	4b31      	ldr	r3, [pc, #196]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800240c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6892      	ldr	r2, [r2, #8]
 8002414:	0211      	lsls	r1, r2, #8
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	0912      	lsrs	r2, r2, #4
 800241c:	0452      	lsls	r2, r2, #17
 800241e:	430a      	orrs	r2, r1
 8002420:	492a      	ldr	r1, [pc, #168]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	610b      	str	r3, [r1, #16]
 8002426:	e027      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d112      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800242e:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002436:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6892      	ldr	r2, [r2, #8]
 800243e:	0211      	lsls	r1, r2, #8
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6912      	ldr	r2, [r2, #16]
 8002444:	0852      	lsrs	r2, r2, #1
 8002446:	3a01      	subs	r2, #1
 8002448:	0552      	lsls	r2, r2, #21
 800244a:	430a      	orrs	r2, r1
 800244c:	491f      	ldr	r1, [pc, #124]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	610b      	str	r3, [r1, #16]
 8002452:	e011      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800245c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6892      	ldr	r2, [r2, #8]
 8002464:	0211      	lsls	r1, r2, #8
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6952      	ldr	r2, [r2, #20]
 800246a:	0852      	lsrs	r2, r2, #1
 800246c:	3a01      	subs	r2, #1
 800246e:	0652      	lsls	r2, r2, #25
 8002470:	430a      	orrs	r2, r1
 8002472:	4916      	ldr	r1, [pc, #88]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800247e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002482:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fb00 	bl	8000a88 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800248a:	e009      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800248c:	f7fe fafc 	bl	8000a88 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d902      	bls.n	80024a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	73fb      	strb	r3, [r7, #15]
          break;
 800249e:	e005      	b.n	80024ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	4904      	ldr	r1, [pc, #16]	@ (80024cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000

080024d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024de:	4b6a      	ldr	r3, [pc, #424]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d018      	beq.n	800251c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024ea:	4b67      	ldr	r3, [pc, #412]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10d      	bne.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
       ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002502:	4b61      	ldr	r3, [pc, #388]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
       ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d047      	beq.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	e044      	b.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d018      	beq.n	8002556 <RCCEx_PLLSAI2_Config+0x86>
 8002524:	2b03      	cmp	r3, #3
 8002526:	d825      	bhi.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d002      	beq.n	8002532 <RCCEx_PLLSAI2_Config+0x62>
 800252c:	2b02      	cmp	r3, #2
 800252e:	d009      	beq.n	8002544 <RCCEx_PLLSAI2_Config+0x74>
 8002530:	e020      	b.n	8002574 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002532:	4b55      	ldr	r3, [pc, #340]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11d      	bne.n	800257a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002542:	e01a      	b.n	800257a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002544:	4b50      	ldr	r3, [pc, #320]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d116      	bne.n	800257e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002554:	e013      	b.n	800257e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002556:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002562:	4b49      	ldr	r3, [pc, #292]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002572:	e006      	b.n	8002582 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e004      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800257a:	bf00      	nop
 800257c:	e002      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800257e:	bf00      	nop
 8002580:	e000      	b.n	8002584 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002582:	bf00      	nop
    }

    if(status == HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800258a:	4b3f      	ldr	r3, [pc, #252]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	430b      	orrs	r3, r1
 80025a0:	4939      	ldr	r1, [pc, #228]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d167      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025ac:	4b36      	ldr	r3, [pc, #216]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a35      	ldr	r2, [pc, #212]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7fe fa66 	bl	8000a88 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025be:	e009      	b.n	80025d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025c0:	f7fe fa62 	bl	8000a88 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d902      	bls.n	80025d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	73fb      	strb	r3, [r7, #15]
        break;
 80025d2:	e005      	b.n	80025e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ef      	bne.n	80025c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d14a      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025ec:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6892      	ldr	r2, [r2, #8]
 80025fc:	0211      	lsls	r1, r2, #8
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	0912      	lsrs	r2, r2, #4
 8002604:	0452      	lsls	r2, r2, #17
 8002606:	430a      	orrs	r2, r1
 8002608:	491f      	ldr	r1, [pc, #124]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	614b      	str	r3, [r1, #20]
 800260e:	e011      	b.n	8002634 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002618:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6912      	ldr	r2, [r2, #16]
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	430a      	orrs	r2, r1
 800262e:	4916      	ldr	r1, [pc, #88]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	4313      	orrs	r3, r2
 8002632:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002634:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002640:	f7fe fa22 	bl	8000a88 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002646:	e009      	b.n	800265c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002648:	f7fe fa1e 	bl	8000a88 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	73fb      	strb	r3, [r7, #15]
          break;
 800265a:	e005      	b.n	8002668 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800265c:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ef      	beq.n	8002648 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4904      	ldr	r1, [pc, #16]	@ (8002688 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000

0800268c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e049      	b.n	8002732 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f841 	bl	800273a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f000 f9e0 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d001      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e04f      	b.n	8002808 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <HAL_TIM_Base_Start_IT+0xc4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01d      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002792:	d018      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1f      	ldr	r2, [pc, #124]	@ (8002818 <HAL_TIM_Base_Start_IT+0xc8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1e      	ldr	r2, [pc, #120]	@ (800281c <HAL_TIM_Base_Start_IT+0xcc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <HAL_TIM_Base_Start_IT+0xd0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <HAL_TIM_Base_Start_IT+0xd4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_TIM_Base_Start_IT+0x76>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <HAL_TIM_Base_Start_IT+0xd8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d115      	bne.n	80027f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4b17      	ldr	r3, [pc, #92]	@ (800282c <HAL_TIM_Base_Start_IT+0xdc>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d015      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0xb4>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027de:	d011      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	e008      	b.n	8002804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e000      	b.n	8002806 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40000400 	.word	0x40000400
 800281c:	40000800 	.word	0x40000800
 8002820:	40000c00 	.word	0x40000c00
 8002824:	40013400 	.word	0x40013400
 8002828:	40014000 	.word	0x40014000
 800282c:	00010007 	.word	0x00010007

08002830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d020      	beq.n	8002894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0202 	mvn.w	r2, #2
 8002864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8e9 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8db 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8ec 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d020      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0204 	mvn.w	r2, #4
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8c3 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8b5 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8c6 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d020      	beq.n	800292c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0208 	mvn.w	r2, #8
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2204      	movs	r2, #4
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f89d 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f88f 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f8a0 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d020      	beq.n	8002978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0210 	mvn.w	r2, #16
 8002948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2208      	movs	r2, #8
 800294e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f877 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f869 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f87a 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0201 	mvn.w	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fd feca 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d104      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00c      	beq.n	80029ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80029c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f913 	bl	8002bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00c      	beq.n	80029ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80029e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f90b 	bl	8002c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00c      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f834 	bl	8002a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0220 	mvn.w	r2, #32
 8002a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8d3 	bl	8002bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a46      	ldr	r2, [pc, #280]	@ (8002bbc <TIM_Base_SetConfig+0x12c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aae:	d00f      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a43      	ldr	r2, [pc, #268]	@ (8002bc0 <TIM_Base_SetConfig+0x130>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00b      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a42      	ldr	r2, [pc, #264]	@ (8002bc4 <TIM_Base_SetConfig+0x134>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d007      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a41      	ldr	r2, [pc, #260]	@ (8002bc8 <TIM_Base_SetConfig+0x138>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a40      	ldr	r2, [pc, #256]	@ (8002bcc <TIM_Base_SetConfig+0x13c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a35      	ldr	r2, [pc, #212]	@ (8002bbc <TIM_Base_SetConfig+0x12c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af0:	d01b      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a32      	ldr	r2, [pc, #200]	@ (8002bc0 <TIM_Base_SetConfig+0x130>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d017      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a31      	ldr	r2, [pc, #196]	@ (8002bc4 <TIM_Base_SetConfig+0x134>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a30      	ldr	r2, [pc, #192]	@ (8002bc8 <TIM_Base_SetConfig+0x138>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002bcc <TIM_Base_SetConfig+0x13c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2e      	ldr	r2, [pc, #184]	@ (8002bd0 <TIM_Base_SetConfig+0x140>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd4 <TIM_Base_SetConfig+0x144>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a2c      	ldr	r2, [pc, #176]	@ (8002bd8 <TIM_Base_SetConfig+0x148>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <TIM_Base_SetConfig+0x12c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00f      	beq.n	8002b88 <TIM_Base_SetConfig+0xf8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <TIM_Base_SetConfig+0x13c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00b      	beq.n	8002b88 <TIM_Base_SetConfig+0xf8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <TIM_Base_SetConfig+0x140>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d007      	beq.n	8002b88 <TIM_Base_SetConfig+0xf8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <TIM_Base_SetConfig+0x144>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <TIM_Base_SetConfig+0xf8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a15      	ldr	r2, [pc, #84]	@ (8002bd8 <TIM_Base_SetConfig+0x148>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d103      	bne.n	8002b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f023 0201 	bic.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40000800 	.word	0x40000800
 8002bc8:	40000c00 	.word	0x40000c00
 8002bcc:	40013400 	.word	0x40013400
 8002bd0:	40014000 	.word	0x40014000
 8002bd4:	40014400 	.word	0x40014400
 8002bd8:	40014800 	.word	0x40014800

08002bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e040      	b.n	8002cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd fdb8 	bl	80007b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	@ 0x24
 8002c44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fae0 	bl	8003224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f825 	bl	8002cb4 <UART_SetConfig>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e01b      	b.n	8002cac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fb5f 	bl	8003368 <UART_CheckIdleState>
 8002caa:	4603      	mov	r3, r0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b08a      	sub	sp, #40	@ 0x28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4ba4      	ldr	r3, [pc, #656]	@ (8002f74 <UART_SetConfig+0x2c0>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a99      	ldr	r2, [pc, #612]	@ (8002f78 <UART_SetConfig+0x2c4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d004      	beq.n	8002d20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a90      	ldr	r2, [pc, #576]	@ (8002f7c <UART_SetConfig+0x2c8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d126      	bne.n	8002d8c <UART_SetConfig+0xd8>
 8002d3e:	4b90      	ldr	r3, [pc, #576]	@ (8002f80 <UART_SetConfig+0x2cc>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d81b      	bhi.n	8002d84 <UART_SetConfig+0xd0>
 8002d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d54 <UART_SetConfig+0xa0>)
 8002d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d52:	bf00      	nop
 8002d54:	08002d65 	.word	0x08002d65
 8002d58:	08002d75 	.word	0x08002d75
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d7d 	.word	0x08002d7d
 8002d64:	2301      	movs	r3, #1
 8002d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d6a:	e116      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d72:	e112      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002d74:	2304      	movs	r3, #4
 8002d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d7a:	e10e      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d82:	e10a      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002d84:	2310      	movs	r3, #16
 8002d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d8a:	e106      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a7c      	ldr	r2, [pc, #496]	@ (8002f84 <UART_SetConfig+0x2d0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d138      	bne.n	8002e08 <UART_SetConfig+0x154>
 8002d96:	4b7a      	ldr	r3, [pc, #488]	@ (8002f80 <UART_SetConfig+0x2cc>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d82d      	bhi.n	8002e00 <UART_SetConfig+0x14c>
 8002da4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <UART_SetConfig+0xf8>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002de1 	.word	0x08002de1
 8002db0:	08002e01 	.word	0x08002e01
 8002db4:	08002e01 	.word	0x08002e01
 8002db8:	08002e01 	.word	0x08002e01
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002e01 	.word	0x08002e01
 8002dc4:	08002e01 	.word	0x08002e01
 8002dc8:	08002e01 	.word	0x08002e01
 8002dcc:	08002de9 	.word	0x08002de9
 8002dd0:	08002e01 	.word	0x08002e01
 8002dd4:	08002e01 	.word	0x08002e01
 8002dd8:	08002e01 	.word	0x08002e01
 8002ddc:	08002df9 	.word	0x08002df9
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002de6:	e0d8      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002de8:	2302      	movs	r3, #2
 8002dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dee:	e0d4      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002df0:	2304      	movs	r3, #4
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002df6:	e0d0      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002df8:	2308      	movs	r3, #8
 8002dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dfe:	e0cc      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e00:	2310      	movs	r3, #16
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e06:	e0c8      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5e      	ldr	r2, [pc, #376]	@ (8002f88 <UART_SetConfig+0x2d4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d125      	bne.n	8002e5e <UART_SetConfig+0x1aa>
 8002e12:	4b5b      	ldr	r3, [pc, #364]	@ (8002f80 <UART_SetConfig+0x2cc>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e1c:	2b30      	cmp	r3, #48	@ 0x30
 8002e1e:	d016      	beq.n	8002e4e <UART_SetConfig+0x19a>
 8002e20:	2b30      	cmp	r3, #48	@ 0x30
 8002e22:	d818      	bhi.n	8002e56 <UART_SetConfig+0x1a2>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d00a      	beq.n	8002e3e <UART_SetConfig+0x18a>
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d814      	bhi.n	8002e56 <UART_SetConfig+0x1a2>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <UART_SetConfig+0x182>
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d008      	beq.n	8002e46 <UART_SetConfig+0x192>
 8002e34:	e00f      	b.n	8002e56 <UART_SetConfig+0x1a2>
 8002e36:	2300      	movs	r3, #0
 8002e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3c:	e0ad      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e44:	e0a9      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e46:	2304      	movs	r3, #4
 8002e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4c:	e0a5      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e54:	e0a1      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e56:	2310      	movs	r3, #16
 8002e58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e5c:	e09d      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a4a      	ldr	r2, [pc, #296]	@ (8002f8c <UART_SetConfig+0x2d8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d125      	bne.n	8002eb4 <UART_SetConfig+0x200>
 8002e68:	4b45      	ldr	r3, [pc, #276]	@ (8002f80 <UART_SetConfig+0x2cc>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e72:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e74:	d016      	beq.n	8002ea4 <UART_SetConfig+0x1f0>
 8002e76:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e78:	d818      	bhi.n	8002eac <UART_SetConfig+0x1f8>
 8002e7a:	2b80      	cmp	r3, #128	@ 0x80
 8002e7c:	d00a      	beq.n	8002e94 <UART_SetConfig+0x1e0>
 8002e7e:	2b80      	cmp	r3, #128	@ 0x80
 8002e80:	d814      	bhi.n	8002eac <UART_SetConfig+0x1f8>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <UART_SetConfig+0x1d8>
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d008      	beq.n	8002e9c <UART_SetConfig+0x1e8>
 8002e8a:	e00f      	b.n	8002eac <UART_SetConfig+0x1f8>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e92:	e082      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e94:	2302      	movs	r3, #2
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e9a:	e07e      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea2:	e07a      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eaa:	e076      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002eac:	2310      	movs	r3, #16
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e072      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a35      	ldr	r2, [pc, #212]	@ (8002f90 <UART_SetConfig+0x2dc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d12a      	bne.n	8002f14 <UART_SetConfig+0x260>
 8002ebe:	4b30      	ldr	r3, [pc, #192]	@ (8002f80 <UART_SetConfig+0x2cc>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ecc:	d01a      	beq.n	8002f04 <UART_SetConfig+0x250>
 8002ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ed2:	d81b      	bhi.n	8002f0c <UART_SetConfig+0x258>
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed8:	d00c      	beq.n	8002ef4 <UART_SetConfig+0x240>
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ede:	d815      	bhi.n	8002f0c <UART_SetConfig+0x258>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <UART_SetConfig+0x238>
 8002ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee8:	d008      	beq.n	8002efc <UART_SetConfig+0x248>
 8002eea:	e00f      	b.n	8002f0c <UART_SetConfig+0x258>
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef2:	e052      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002efa:	e04e      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002efc:	2304      	movs	r3, #4
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f02:	e04a      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002f04:	2308      	movs	r3, #8
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f0a:	e046      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f12:	e042      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a17      	ldr	r2, [pc, #92]	@ (8002f78 <UART_SetConfig+0x2c4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d13a      	bne.n	8002f94 <UART_SetConfig+0x2e0>
 8002f1e:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <UART_SetConfig+0x2cc>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f2c:	d01a      	beq.n	8002f64 <UART_SetConfig+0x2b0>
 8002f2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002f32:	d81b      	bhi.n	8002f6c <UART_SetConfig+0x2b8>
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f38:	d00c      	beq.n	8002f54 <UART_SetConfig+0x2a0>
 8002f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f3e:	d815      	bhi.n	8002f6c <UART_SetConfig+0x2b8>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <UART_SetConfig+0x298>
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f48:	d008      	beq.n	8002f5c <UART_SetConfig+0x2a8>
 8002f4a:	e00f      	b.n	8002f6c <UART_SetConfig+0x2b8>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f52:	e022      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002f54:	2302      	movs	r3, #2
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5a:	e01e      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f62:	e01a      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002f64:	2308      	movs	r3, #8
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6a:	e016      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f72:	e012      	b.n	8002f9a <UART_SetConfig+0x2e6>
 8002f74:	efff69f3 	.word	0xefff69f3
 8002f78:	40008000 	.word	0x40008000
 8002f7c:	40013800 	.word	0x40013800
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40004400 	.word	0x40004400
 8002f88:	40004800 	.word	0x40004800
 8002f8c:	40004c00 	.word	0x40004c00
 8002f90:	40005000 	.word	0x40005000
 8002f94:	2310      	movs	r3, #16
 8002f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a9f      	ldr	r2, [pc, #636]	@ (800321c <UART_SetConfig+0x568>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d17a      	bne.n	800309a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d824      	bhi.n	8002ff6 <UART_SetConfig+0x342>
 8002fac:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <UART_SetConfig+0x300>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fd9 	.word	0x08002fd9
 8002fb8:	08002ff7 	.word	0x08002ff7
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	08002ff7 	.word	0x08002ff7
 8002fc4:	08002fe7 	.word	0x08002fe7
 8002fc8:	08002ff7 	.word	0x08002ff7
 8002fcc:	08002ff7 	.word	0x08002ff7
 8002fd0:	08002ff7 	.word	0x08002ff7
 8002fd4:	08002fef 	.word	0x08002fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7fe fdde 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8002fdc:	61f8      	str	r0, [r7, #28]
        break;
 8002fde:	e010      	b.n	8003002 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe0:	4b8f      	ldr	r3, [pc, #572]	@ (8003220 <UART_SetConfig+0x56c>)
 8002fe2:	61fb      	str	r3, [r7, #28]
        break;
 8002fe4:	e00d      	b.n	8003002 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe6:	f7fe fd3f 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8002fea:	61f8      	str	r0, [r7, #28]
        break;
 8002fec:	e009      	b.n	8003002 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ff2:	61fb      	str	r3, [r7, #28]
        break;
 8002ff4:	e005      	b.n	8003002 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003000:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80fb 	beq.w	8003200 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	429a      	cmp	r2, r3
 8003018:	d305      	bcc.n	8003026 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	429a      	cmp	r2, r3
 8003024:	d903      	bls.n	800302e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800302c:	e0e8      	b.n	8003200 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2200      	movs	r2, #0
 8003032:	461c      	mov	r4, r3
 8003034:	4615      	mov	r5, r2
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	022b      	lsls	r3, r5, #8
 8003040:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003044:	0222      	lsls	r2, r4, #8
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	6849      	ldr	r1, [r1, #4]
 800304a:	0849      	lsrs	r1, r1, #1
 800304c:	2000      	movs	r0, #0
 800304e:	4688      	mov	r8, r1
 8003050:	4681      	mov	r9, r0
 8003052:	eb12 0a08 	adds.w	sl, r2, r8
 8003056:	eb43 0b09 	adc.w	fp, r3, r9
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003068:	4650      	mov	r0, sl
 800306a:	4659      	mov	r1, fp
 800306c:	f7fd f8b0 	bl	80001d0 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800307e:	d308      	bcc.n	8003092 <UART_SetConfig+0x3de>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003086:	d204      	bcs.n	8003092 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	e0b6      	b.n	8003200 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003098:	e0b2      	b.n	8003200 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a2:	d15e      	bne.n	8003162 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80030a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d828      	bhi.n	80030fe <UART_SetConfig+0x44a>
 80030ac:	a201      	add	r2, pc, #4	@ (adr r2, 80030b4 <UART_SetConfig+0x400>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030d9 	.word	0x080030d9
 80030b8:	080030e1 	.word	0x080030e1
 80030bc:	080030e9 	.word	0x080030e9
 80030c0:	080030ff 	.word	0x080030ff
 80030c4:	080030ef 	.word	0x080030ef
 80030c8:	080030ff 	.word	0x080030ff
 80030cc:	080030ff 	.word	0x080030ff
 80030d0:	080030ff 	.word	0x080030ff
 80030d4:	080030f7 	.word	0x080030f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d8:	f7fe fd5e 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 80030dc:	61f8      	str	r0, [r7, #28]
        break;
 80030de:	e014      	b.n	800310a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030e0:	f7fe fd70 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 80030e4:	61f8      	str	r0, [r7, #28]
        break;
 80030e6:	e010      	b.n	800310a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003220 <UART_SetConfig+0x56c>)
 80030ea:	61fb      	str	r3, [r7, #28]
        break;
 80030ec:	e00d      	b.n	800310a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ee:	f7fe fcbb 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80030f2:	61f8      	str	r0, [r7, #28]
        break;
 80030f4:	e009      	b.n	800310a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030fa:	61fb      	str	r3, [r7, #28]
        break;
 80030fc:	e005      	b.n	800310a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d077      	beq.n	8003200 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	005a      	lsls	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	441a      	add	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b0f      	cmp	r3, #15
 800312a:	d916      	bls.n	800315a <UART_SetConfig+0x4a6>
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003132:	d212      	bcs.n	800315a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f023 030f 	bic.w	r3, r3, #15
 800313c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	b29b      	uxth	r3, r3
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	b29a      	uxth	r2, r3
 800314a:	8afb      	ldrh	r3, [r7, #22]
 800314c:	4313      	orrs	r3, r2
 800314e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	8afa      	ldrh	r2, [r7, #22]
 8003156:	60da      	str	r2, [r3, #12]
 8003158:	e052      	b.n	8003200 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003160:	e04e      	b.n	8003200 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003162:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003166:	2b08      	cmp	r3, #8
 8003168:	d827      	bhi.n	80031ba <UART_SetConfig+0x506>
 800316a:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <UART_SetConfig+0x4bc>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003195 	.word	0x08003195
 8003174:	0800319d 	.word	0x0800319d
 8003178:	080031a5 	.word	0x080031a5
 800317c:	080031bb 	.word	0x080031bb
 8003180:	080031ab 	.word	0x080031ab
 8003184:	080031bb 	.word	0x080031bb
 8003188:	080031bb 	.word	0x080031bb
 800318c:	080031bb 	.word	0x080031bb
 8003190:	080031b3 	.word	0x080031b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003194:	f7fe fd00 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8003198:	61f8      	str	r0, [r7, #28]
        break;
 800319a:	e014      	b.n	80031c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800319c:	f7fe fd12 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 80031a0:	61f8      	str	r0, [r7, #28]
        break;
 80031a2:	e010      	b.n	80031c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <UART_SetConfig+0x56c>)
 80031a6:	61fb      	str	r3, [r7, #28]
        break;
 80031a8:	e00d      	b.n	80031c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031aa:	f7fe fc5d 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 80031ae:	61f8      	str	r0, [r7, #28]
        break;
 80031b0:	e009      	b.n	80031c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b6:	61fb      	str	r3, [r7, #28]
        break;
 80031b8:	e005      	b.n	80031c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031c4:	bf00      	nop
    }

    if (pclk != 0U)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d019      	beq.n	8003200 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	085a      	lsrs	r2, r3, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	441a      	add	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	d909      	bls.n	80031fa <UART_SetConfig+0x546>
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ec:	d205      	bcs.n	80031fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	e002      	b.n	8003200 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800320c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003210:	4618      	mov	r0, r3
 8003212:	3728      	adds	r7, #40	@ 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321a:	bf00      	nop
 800321c:	40008000 	.word	0x40008000
 8003220:	00f42400 	.word	0x00f42400

08003224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01a      	beq.n	800333a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003322:	d10a      	bne.n	800333a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b098      	sub	sp, #96	@ 0x60
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003378:	f7fd fb86 	bl	8000a88 <HAL_GetTick>
 800337c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d12e      	bne.n	80033ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003394:	2200      	movs	r2, #0
 8003396:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f88c 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d021      	beq.n	80033ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e6      	bne.n	80033a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e062      	b.n	80034b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d149      	bne.n	800348c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003400:	2200      	movs	r2, #0
 8003402:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f856 	bl	80034b8 <UART_WaitOnFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03c      	beq.n	800348c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	623b      	str	r3, [r7, #32]
   return(result);
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003430:	633b      	str	r3, [r7, #48]	@ 0x30
 8003432:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e6      	bne.n	8003412 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	60fb      	str	r3, [r7, #12]
   return(result);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003464:	61fa      	str	r2, [r7, #28]
 8003466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	69b9      	ldr	r1, [r7, #24]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	617b      	str	r3, [r7, #20]
   return(result);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e011      	b.n	80034b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3758      	adds	r7, #88	@ 0x58
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c8:	e04f      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034d0:	d04b      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7fd fad9 	bl	8000a88 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e04e      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d037      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b80      	cmp	r3, #128	@ 0x80
 80034fe:	d034      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b40      	cmp	r3, #64	@ 0x40
 8003504:	d031      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b08      	cmp	r3, #8
 8003512:	d110      	bne.n	8003536 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f838 	bl	8003592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2208      	movs	r2, #8
 8003526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e029      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003544:	d111      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800354e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f81e 	bl	8003592 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e00f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d0a0      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003592:	b480      	push	{r7}
 8003594:	b095      	sub	sp, #84	@ 0x54
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e6      	bne.n	800359a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	61fb      	str	r3, [r7, #28]
   return(result);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3308      	adds	r3, #8
 80035ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003604:	2b01      	cmp	r3, #1
 8003606:	d118      	bne.n	800363a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	60bb      	str	r3, [r7, #8]
   return(result);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f023 0310 	bic.w	r3, r3, #16
 800361c:	647b      	str	r3, [r7, #68]	@ 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6979      	ldr	r1, [r7, #20]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	613b      	str	r3, [r7, #16]
   return(result);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e6      	bne.n	8003608 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800364e:	bf00      	nop
 8003650:	3754      	adds	r7, #84	@ 0x54
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <__NVIC_SetPriority>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	2b00      	cmp	r3, #0
 800366e:	db0a      	blt.n	8003686 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	490c      	ldr	r1, [pc, #48]	@ (80036a8 <__NVIC_SetPriority+0x4c>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	440b      	add	r3, r1
 8003680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003684:	e00a      	b.n	800369c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4908      	ldr	r1, [pc, #32]	@ (80036ac <__NVIC_SetPriority+0x50>)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	3b04      	subs	r3, #4
 8003694:	0112      	lsls	r2, r2, #4
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	440b      	add	r3, r1
 800369a:	761a      	strb	r2, [r3, #24]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000e100 	.word	0xe000e100
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80036b4:	4b05      	ldr	r3, [pc, #20]	@ (80036cc <SysTick_Handler+0x1c>)
 80036b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80036b8:	f001 fec6 	bl	8005448 <xTaskGetSchedulerState>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80036c2:	f002 fcc1 	bl	8006048 <xPortSysTickHandler>
  }
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000e010 	.word	0xe000e010

080036d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80036d4:	2100      	movs	r1, #0
 80036d6:	f06f 0004 	mvn.w	r0, #4
 80036da:	f7ff ffbf 	bl	800365c <__NVIC_SetPriority>
#endif
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ea:	f3ef 8305 	mrs	r3, IPSR
 80036ee:	603b      	str	r3, [r7, #0]
  return(result);
 80036f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80036f6:	f06f 0305 	mvn.w	r3, #5
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	e00c      	b.n	8003718 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80036fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <osKernelInitialize+0x44>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003706:	4b08      	ldr	r3, [pc, #32]	@ (8003728 <osKernelInitialize+0x44>)
 8003708:	2201      	movs	r2, #1
 800370a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	e002      	b.n	8003718 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003716:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003718:	687b      	ldr	r3, [r7, #4]
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000168 	.word	0x20000168

0800372c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003732:	f3ef 8305 	mrs	r3, IPSR
 8003736:	603b      	str	r3, [r7, #0]
  return(result);
 8003738:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <osKernelStart+0x1a>
    stat = osErrorISR;
 800373e:	f06f 0305 	mvn.w	r3, #5
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	e010      	b.n	8003768 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003746:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <osKernelStart+0x48>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d109      	bne.n	8003762 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800374e:	f7ff ffbf 	bl	80036d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003752:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <osKernelStart+0x48>)
 8003754:	2202      	movs	r2, #2
 8003756:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003758:	f001 fa12 	bl	8004b80 <vTaskStartScheduler>
      stat = osOK;
 800375c:	2300      	movs	r3, #0
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	e002      	b.n	8003768 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003766:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003768:	687b      	ldr	r3, [r7, #4]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000168 	.word	0x20000168

08003778 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	@ 0x38
 800377c:	af04      	add	r7, sp, #16
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003788:	f3ef 8305 	mrs	r3, IPSR
 800378c:	617b      	str	r3, [r7, #20]
  return(result);
 800378e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003790:	2b00      	cmp	r3, #0
 8003792:	d17e      	bne.n	8003892 <osThreadNew+0x11a>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d07b      	beq.n	8003892 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800379e:	2318      	movs	r3, #24
 80037a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d045      	beq.n	800383e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <osThreadNew+0x48>
        name = attr->name;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <osThreadNew+0x6e>
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b38      	cmp	r3, #56	@ 0x38
 80037d8:	d805      	bhi.n	80037e6 <osThreadNew+0x6e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <osThreadNew+0x72>
        return (NULL);
 80037e6:	2300      	movs	r3, #0
 80037e8:	e054      	b.n	8003894 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00e      	beq.n	8003820 <osThreadNew+0xa8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2ba7      	cmp	r3, #167	@ 0xa7
 8003808:	d90a      	bls.n	8003820 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <osThreadNew+0xa8>
        mem = 1;
 800381a:	2301      	movs	r3, #1
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	e010      	b.n	8003842 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10c      	bne.n	8003842 <osThreadNew+0xca>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d108      	bne.n	8003842 <osThreadNew+0xca>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <osThreadNew+0xca>
          mem = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	e001      	b.n	8003842 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d110      	bne.n	800386a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003850:	9202      	str	r2, [sp, #8]
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 ff9a 	bl	8004798 <xTaskCreateStatic>
 8003864:	4603      	mov	r3, r0
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	e013      	b.n	8003892 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d110      	bne.n	8003892 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	b29a      	uxth	r2, r3
 8003874:	f107 0310 	add.w	r3, r7, #16
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 ffe8 	bl	8004858 <xTaskCreate>
 8003888:	4603      	mov	r3, r0
 800388a:	2b01      	cmp	r3, #1
 800388c:	d001      	beq.n	8003892 <osThreadNew+0x11a>
            hTask = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003892:	693b      	ldr	r3, [r7, #16]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3728      	adds	r7, #40	@ 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038a4:	f3ef 8305 	mrs	r3, IPSR
 80038a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80038aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <osDelay+0x1c>
    stat = osErrorISR;
 80038b0:	f06f 0305 	mvn.w	r3, #5
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e007      	b.n	80038c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f001 f926 	bl	8004b14 <vTaskDelay>
    }
  }

  return (stat);
 80038c8:	68fb      	ldr	r3, [r7, #12]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b08a      	sub	sp, #40	@ 0x28
 80038d6:	af02      	add	r7, sp, #8
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038e2:	f3ef 8305 	mrs	r3, IPSR
 80038e6:	613b      	str	r3, [r7, #16]
  return(result);
 80038e8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d175      	bne.n	80039da <osSemaphoreNew+0x108>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d072      	beq.n	80039da <osSemaphoreNew+0x108>
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d86e      	bhi.n	80039da <osSemaphoreNew+0x108>
    mem = -1;
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003900:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d015      	beq.n	8003934 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d006      	beq.n	800391e <osSemaphoreNew+0x4c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b4f      	cmp	r3, #79	@ 0x4f
 8003916:	d902      	bls.n	800391e <osSemaphoreNew+0x4c>
        mem = 1;
 8003918:	2301      	movs	r3, #1
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	e00c      	b.n	8003938 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <osSemaphoreNew+0x66>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <osSemaphoreNew+0x66>
          mem = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e001      	b.n	8003938 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800393e:	d04c      	beq.n	80039da <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d128      	bne.n	8003998 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10a      	bne.n	8003962 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2203      	movs	r2, #3
 8003952:	9200      	str	r2, [sp, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	2100      	movs	r1, #0
 8003958:	2001      	movs	r0, #1
 800395a:	f000 f995 	bl	8003c88 <xQueueGenericCreateStatic>
 800395e:	61f8      	str	r0, [r7, #28]
 8003960:	e005      	b.n	800396e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003962:	2203      	movs	r2, #3
 8003964:	2100      	movs	r1, #0
 8003966:	2001      	movs	r0, #1
 8003968:	f000 fa0b 	bl	8003d82 <xQueueGenericCreate>
 800396c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d022      	beq.n	80039ba <osSemaphoreNew+0xe8>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01f      	beq.n	80039ba <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800397a:	2300      	movs	r3, #0
 800397c:	2200      	movs	r2, #0
 800397e:	2100      	movs	r1, #0
 8003980:	69f8      	ldr	r0, [r7, #28]
 8003982:	f000 facb 	bl	8003f1c <xQueueGenericSend>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d016      	beq.n	80039ba <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800398c:	69f8      	ldr	r0, [r7, #28]
 800398e:	f000 fd47 	bl	8004420 <vQueueDelete>
            hSemaphore = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e010      	b.n	80039ba <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d108      	bne.n	80039b0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa49 	bl	8003e3e <xQueueCreateCountingSemaphoreStatic>
 80039ac:	61f8      	str	r0, [r7, #28]
 80039ae:	e004      	b.n	80039ba <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fa7c 	bl	8003eb0 <xQueueCreateCountingSemaphore>
 80039b8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00c      	beq.n	80039da <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <osSemaphoreNew+0xfc>
          name = attr->name;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e001      	b.n	80039d2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80039d2:	6979      	ldr	r1, [r7, #20]
 80039d4:	69f8      	ldr	r0, [r7, #28]
 80039d6:	f000 fe57 	bl	8004688 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80039da:	69fb      	ldr	r3, [r7, #28]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a07      	ldr	r2, [pc, #28]	@ (8003a10 <vApplicationGetIdleTaskMemory+0x2c>)
 80039f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4a06      	ldr	r2, [pc, #24]	@ (8003a14 <vApplicationGetIdleTaskMemory+0x30>)
 80039fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2280      	movs	r2, #128	@ 0x80
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2000016c 	.word	0x2000016c
 8003a14:	20000214 	.word	0x20000214

08003a18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a07      	ldr	r2, [pc, #28]	@ (8003a44 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4a06      	ldr	r2, [pc, #24]	@ (8003a48 <vApplicationGetTimerTaskMemory+0x30>)
 8003a2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a36:	601a      	str	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	20000414 	.word	0x20000414
 8003a48:	200004bc 	.word	0x200004bc

08003a4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f103 0208 	add.w	r2, r3, #8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f103 0208 	add.w	r2, r3, #8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f103 0208 	add.w	r2, r3, #8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b04:	d103      	bne.n	8003b0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	e00c      	b.n	8003b28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3308      	adds	r3, #8
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e002      	b.n	8003b1c <vListInsert+0x2e>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d2f6      	bcs.n	8003b16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6852      	ldr	r2, [r2, #4]
 8003b80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d103      	bne.n	8003b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10b      	bne.n	8003be0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	e7fd      	b.n	8003bdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003be0:	f002 f9a2 	bl	8005f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	441a      	add	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c10:	3b01      	subs	r3, #1
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	22ff      	movs	r2, #255	@ 0xff
 8003c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	22ff      	movs	r2, #255	@ 0xff
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d114      	bne.n	8003c60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01a      	beq.n	8003c74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3310      	adds	r3, #16
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 fa3a 	bl	80050bc <xTaskRemoveFromEventList>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <xQueueGenericReset+0xd0>)
 8003c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	e009      	b.n	8003c74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3310      	adds	r3, #16
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fef1 	bl	8003a4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3324      	adds	r3, #36	@ 0x24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff feec 	bl	8003a4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c74:	f002 f98a 	bl	8005f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c78:	2301      	movs	r3, #1
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	@ 0x38
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <xQueueGenericCreateStatic+0x56>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <xQueueGenericCreateStatic+0x5a>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <xQueueGenericCreateStatic+0x5c>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	623b      	str	r3, [r7, #32]
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <xQueueGenericCreateStatic+0x84>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <xQueueGenericCreateStatic+0x88>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <xQueueGenericCreateStatic+0x8a>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	61fb      	str	r3, [r7, #28]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d2e:	2350      	movs	r3, #80	@ 0x50
 8003d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b50      	cmp	r3, #80	@ 0x50
 8003d36:	d00b      	beq.n	8003d50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	61bb      	str	r3, [r7, #24]
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00d      	beq.n	8003d78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f840 	bl	8003df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3730      	adds	r7, #48	@ 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	@ 0x28
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <xQueueGenericCreate+0x2c>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	613b      	str	r3, [r7, #16]
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	e7fd      	b.n	8003daa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	3350      	adds	r3, #80	@ 0x50
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f002 f9d5 	bl	800616c <pvPortMalloc>
 8003dc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d011      	beq.n	8003dee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3350      	adds	r3, #80	@ 0x50
 8003dd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ddc:	79fa      	ldrb	r2, [r7, #7]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f805 	bl	8003df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dee:	69bb      	ldr	r3, [r7, #24]
	}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e002      	b.n	8003e1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e26:	2101      	movs	r1, #1
 8003e28:	69b8      	ldr	r0, [r7, #24]
 8003e2a:	f7ff fec3 	bl	8003bb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b08a      	sub	sp, #40	@ 0x28
 8003e42:	af02      	add	r7, sp, #8
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	61bb      	str	r3, [r7, #24]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d90b      	bls.n	8003e88 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	617b      	str	r3, [r7, #20]
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff fef8 	bl	8003c88 <xQueueGenericCreateStatic>
 8003e98:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
	}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	613b      	str	r3, [r7, #16]
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d90b      	bls.n	8003ef8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	60fb      	str	r3, [r7, #12]
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	e7fd      	b.n	8003ef4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003ef8:	2202      	movs	r2, #2
 8003efa:	2100      	movs	r1, #0
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ff40 	bl	8003d82 <xQueueGenericCreate>
 8003f02:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003f10:	697b      	ldr	r3, [r7, #20]
	}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08e      	sub	sp, #56	@ 0x38
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <xQueueGenericSend+0x34>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <xQueueGenericSend+0x42>
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <xQueueGenericSend+0x46>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <xQueueGenericSend+0x48>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <xQueueGenericSend+0x64>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d103      	bne.n	8003f8e <xQueueGenericSend+0x72>
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <xQueueGenericSend+0x76>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <xQueueGenericSend+0x78>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <xQueueGenericSend+0x94>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	623b      	str	r3, [r7, #32]
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fb0:	f001 fa4a 	bl	8005448 <xTaskGetSchedulerState>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <xQueueGenericSend+0xa4>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <xQueueGenericSend+0xa8>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <xQueueGenericSend+0xaa>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61fb      	str	r3, [r7, #28]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fe2:	f001 ffa1 	bl	8005f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <xQueueGenericSend+0xdc>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d129      	bne.n	800404c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ffe:	f000 fa33 	bl	8004468 <prvCopyDataToQueue>
 8004002:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d010      	beq.n	800402e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	3324      	adds	r3, #36	@ 0x24
 8004010:	4618      	mov	r0, r3
 8004012:	f001 f853 	bl	80050bc <xTaskRemoveFromEventList>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800401c:	4b3f      	ldr	r3, [pc, #252]	@ (800411c <xQueueGenericSend+0x200>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	e00a      	b.n	8004044 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004034:	4b39      	ldr	r3, [pc, #228]	@ (800411c <xQueueGenericSend+0x200>)
 8004036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004044:	f001 ffa2 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 8004048:	2301      	movs	r3, #1
 800404a:	e063      	b.n	8004114 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004052:	f001 ff9b 	bl	8005f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004056:	2300      	movs	r3, #0
 8004058:	e05c      	b.n	8004114 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f88d 	bl	8005184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800406e:	f001 ff8d 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004072:	f000 fdf5 	bl	8004c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004076:	f001 ff57 	bl	8005f28 <vPortEnterCritical>
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004080:	b25b      	sxtb	r3, r3
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004086:	d103      	bne.n	8004090 <xQueueGenericSend+0x174>
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004096:	b25b      	sxtb	r3, r3
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800409c:	d103      	bne.n	80040a6 <xQueueGenericSend+0x18a>
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040a6:	f001 ff71 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040aa:	1d3a      	adds	r2, r7, #4
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 f87c 	bl	80051b0 <xTaskCheckForTimeOut>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d124      	bne.n	8004108 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040c0:	f000 faca 	bl	8004658 <prvIsQueueFull>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	3310      	adds	r3, #16
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 ffa0 	bl	8005018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040da:	f000 fa55 	bl	8004588 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040de:	f000 fdcd 	bl	8004c7c <xTaskResumeAll>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f47f af7c 	bne.w	8003fe2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040ea:	4b0c      	ldr	r3, [pc, #48]	@ (800411c <xQueueGenericSend+0x200>)
 80040ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	e772      	b.n	8003fe2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040fe:	f000 fa43 	bl	8004588 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004102:	f000 fdbb 	bl	8004c7c <xTaskResumeAll>
 8004106:	e76c      	b.n	8003fe2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800410a:	f000 fa3d 	bl	8004588 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800410e:	f000 fdb5 	bl	8004c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004114:	4618      	mov	r0, r3
 8004116:	3738      	adds	r7, #56	@ 0x38
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b090      	sub	sp, #64	@ 0x40
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800414a:	bf00      	nop
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <xQueueGenericSendFromISR+0x3e>
 8004156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <xQueueGenericSendFromISR+0x42>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <xQueueGenericSendFromISR+0x44>
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d103      	bne.n	800418e <xQueueGenericSendFromISR+0x6e>
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <xQueueGenericSendFromISR+0x72>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <xQueueGenericSendFromISR+0x74>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	623b      	str	r3, [r7, #32]
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	e7fd      	b.n	80041ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041b0:	f001 ff9a 	bl	80060e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041b4:	f3ef 8211 	mrs	r2, BASEPRI
 80041b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <xQueueGenericSendFromISR+0xc2>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d12f      	bne.n	8004242 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041f8:	f000 f936 	bl	8004468 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004204:	d112      	bne.n	800422c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	3324      	adds	r3, #36	@ 0x24
 8004212:	4618      	mov	r0, r3
 8004214:	f000 ff52 	bl	80050bc <xTaskRemoveFromEventList>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00e      	beq.n	800423c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e007      	b.n	800423c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800422c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004230:	3301      	adds	r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	b25a      	sxtb	r2, r3
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800423c:	2301      	movs	r3, #1
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004240:	e001      	b.n	8004246 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004242:	2300      	movs	r3, #0
 8004244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004250:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004254:	4618      	mov	r0, r3
 8004256:	3740      	adds	r7, #64	@ 0x40
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	@ 0x30
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <xQueueReceive+0x32>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	623b      	str	r3, [r7, #32]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <xQueueReceive+0x40>
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <xQueueReceive+0x44>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <xQueueReceive+0x46>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <xQueueReceive+0x62>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	61fb      	str	r3, [r7, #28]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042be:	f001 f8c3 	bl	8005448 <xTaskGetSchedulerState>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <xQueueReceive+0x72>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <xQueueReceive+0x76>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xQueueReceive+0x78>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <xQueueReceive+0x94>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	61bb      	str	r3, [r7, #24]
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042f0:	f001 fe1a 	bl	8005f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01f      	beq.n	8004340 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004304:	f000 f91a 	bl	800453c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	1e5a      	subs	r2, r3, #1
 800430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00f      	beq.n	8004338 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	3310      	adds	r3, #16
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fecd 	bl	80050bc <xTaskRemoveFromEventList>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004328:	4b3c      	ldr	r3, [pc, #240]	@ (800441c <xQueueReceive+0x1c0>)
 800432a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004338:	f001 fe28 	bl	8005f8c <vPortExitCritical>
				return pdPASS;
 800433c:	2301      	movs	r3, #1
 800433e:	e069      	b.n	8004414 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004346:	f001 fe21 	bl	8005f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800434a:	2300      	movs	r3, #0
 800434c:	e062      	b.n	8004414 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004354:	f107 0310 	add.w	r3, r7, #16
 8004358:	4618      	mov	r0, r3
 800435a:	f000 ff13 	bl	8005184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004362:	f001 fe13 	bl	8005f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004366:	f000 fc7b 	bl	8004c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800436a:	f001 fddd 	bl	8005f28 <vPortEnterCritical>
 800436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004374:	b25b      	sxtb	r3, r3
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800437a:	d103      	bne.n	8004384 <xQueueReceive+0x128>
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800438a:	b25b      	sxtb	r3, r3
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004390:	d103      	bne.n	800439a <xQueueReceive+0x13e>
 8004392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800439a:	f001 fdf7 	bl	8005f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800439e:	1d3a      	adds	r2, r7, #4
 80043a0:	f107 0310 	add.w	r3, r7, #16
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 ff02 	bl	80051b0 <xTaskCheckForTimeOut>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d123      	bne.n	80043fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043b4:	f000 f93a 	bl	800462c <prvIsQueueEmpty>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	3324      	adds	r3, #36	@ 0x24
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fe26 	bl	8005018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043ce:	f000 f8db 	bl	8004588 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043d2:	f000 fc53 	bl	8004c7c <xTaskResumeAll>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d189      	bne.n	80042f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80043dc:	4b0f      	ldr	r3, [pc, #60]	@ (800441c <xQueueReceive+0x1c0>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	e780      	b.n	80042f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f0:	f000 f8ca 	bl	8004588 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043f4:	f000 fc42 	bl	8004c7c <xTaskResumeAll>
 80043f8:	e77a      	b.n	80042f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043fc:	f000 f8c4 	bl	8004588 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004400:	f000 fc3c 	bl	8004c7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004406:	f000 f911 	bl	800462c <prvIsQueueEmpty>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	f43f af6f 	beq.w	80042f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004412:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004414:	4618      	mov	r0, r3
 8004416:	3730      	adds	r7, #48	@ 0x30
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <vQueueDelete+0x2a>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60bb      	str	r3, [r7, #8]
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f946 	bl	80046dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f001 ff54 	bl	8006308 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10d      	bne.n	80044a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d14d      	bne.n	800452a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fff6 	bl	8005484 <xTaskPriorityDisinherit>
 8004498:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	e043      	b.n	800452a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d119      	bne.n	80044dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6858      	ldr	r0, [r3, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	461a      	mov	r2, r3
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	f002 f8cc 	bl	8006650 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	441a      	add	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d32b      	bcc.n	800452a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	e026      	b.n	800452a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	68d8      	ldr	r0, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	461a      	mov	r2, r3
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	f002 f8b2 	bl	8006650 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	425b      	negs	r3, r3
 80044f6:	441a      	add	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d207      	bcs.n	8004518 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	425b      	negs	r3, r3
 8004512:	441a      	add	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d105      	bne.n	800452a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	3b01      	subs	r3, #1
 8004528:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004532:	697b      	ldr	r3, [r7, #20]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d018      	beq.n	8004580 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	441a      	add	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	429a      	cmp	r2, r3
 8004566:	d303      	bcc.n	8004570 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68d9      	ldr	r1, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	461a      	mov	r2, r3
 800457a:	6838      	ldr	r0, [r7, #0]
 800457c:	f002 f868 	bl	8006650 <memcpy>
	}
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004590:	f001 fcca 	bl	8005f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800459a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800459c:	e011      	b.n	80045c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d012      	beq.n	80045cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3324      	adds	r3, #36	@ 0x24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fd86 	bl	80050bc <xTaskRemoveFromEventList>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045b6:	f000 fe5f 	bl	8005278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	3b01      	subs	r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	dce9      	bgt.n	800459e <prvUnlockQueue+0x16>
 80045ca:	e000      	b.n	80045ce <prvUnlockQueue+0x46>
					break;
 80045cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	22ff      	movs	r2, #255	@ 0xff
 80045d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80045d6:	f001 fcd9 	bl	8005f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045da:	f001 fca5 	bl	8005f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045e6:	e011      	b.n	800460c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d012      	beq.n	8004616 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3310      	adds	r3, #16
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fd61 	bl	80050bc <xTaskRemoveFromEventList>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004600:	f000 fe3a 	bl	8005278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004604:	7bbb      	ldrb	r3, [r7, #14]
 8004606:	3b01      	subs	r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800460c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004610:	2b00      	cmp	r3, #0
 8004612:	dce9      	bgt.n	80045e8 <prvUnlockQueue+0x60>
 8004614:	e000      	b.n	8004618 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004616:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	22ff      	movs	r2, #255	@ 0xff
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004620:	f001 fcb4 	bl	8005f8c <vPortExitCritical>
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004634:	f001 fc78 	bl	8005f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e001      	b.n	800464a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800464a:	f001 fc9f 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 800464e:	68fb      	ldr	r3, [r7, #12]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004660:	f001 fc62 	bl	8005f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466c:	429a      	cmp	r2, r3
 800466e:	d102      	bne.n	8004676 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e001      	b.n	800467a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800467a:	f001 fc87 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e014      	b.n	80046c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004698:	4a0f      	ldr	r2, [pc, #60]	@ (80046d8 <vQueueAddToRegistry+0x50>)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046a4:	490c      	ldr	r1, [pc, #48]	@ (80046d8 <vQueueAddToRegistry+0x50>)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046ae:	4a0a      	ldr	r2, [pc, #40]	@ (80046d8 <vQueueAddToRegistry+0x50>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046ba:	e006      	b.n	80046ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3301      	adds	r3, #1
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b07      	cmp	r3, #7
 80046c6:	d9e7      	bls.n	8004698 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	200008bc 	.word	0x200008bc

080046dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	e016      	b.n	8004718 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80046ea:	4a10      	ldr	r2, [pc, #64]	@ (800472c <vQueueUnregisterQueue+0x50>)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10b      	bne.n	8004712 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80046fa:	4a0c      	ldr	r2, [pc, #48]	@ (800472c <vQueueUnregisterQueue+0x50>)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2100      	movs	r1, #0
 8004700:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004704:	4a09      	ldr	r2, [pc, #36]	@ (800472c <vQueueUnregisterQueue+0x50>)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
				break;
 8004710:	e006      	b.n	8004720 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3301      	adds	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b07      	cmp	r3, #7
 800471c:	d9e5      	bls.n	80046ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800471e:	bf00      	nop
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	200008bc 	.word	0x200008bc

08004730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004740:	f001 fbf2 	bl	8005f28 <vPortEnterCritical>
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800474a:	b25b      	sxtb	r3, r3
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004750:	d103      	bne.n	800475a <vQueueWaitForMessageRestricted+0x2a>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004760:	b25b      	sxtb	r3, r3
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004766:	d103      	bne.n	8004770 <vQueueWaitForMessageRestricted+0x40>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004770:	f001 fc0c 	bl	8005f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3324      	adds	r3, #36	@ 0x24
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fc6d 	bl	8005064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800478a:	6978      	ldr	r0, [r7, #20]
 800478c:	f7ff fefc 	bl	8004588 <prvUnlockQueue>
	}
 8004790:	bf00      	nop
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08e      	sub	sp, #56	@ 0x38
 800479c:	af04      	add	r7, sp, #16
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	623b      	str	r3, [r7, #32]
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	61fb      	str	r3, [r7, #28]
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	e7fd      	b.n	80047de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047e2:	23a8      	movs	r3, #168	@ 0xa8
 80047e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2ba8      	cmp	r3, #168	@ 0xa8
 80047ea:	d00b      	beq.n	8004804 <xTaskCreateStatic+0x6c>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	61bb      	str	r3, [r7, #24]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004804:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01e      	beq.n	800484a <xTaskCreateStatic+0xb2>
 800480c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01b      	beq.n	800484a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	2202      	movs	r2, #2
 8004820:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004824:	2300      	movs	r3, #0
 8004826:	9303      	str	r3, [sp, #12]
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	9302      	str	r3, [sp, #8]
 800482c:	f107 0314 	add.w	r3, r7, #20
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f851 	bl	80048e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004842:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004844:	f000 f8f6 	bl	8004a34 <prvAddNewTaskToReadyList>
 8004848:	e001      	b.n	800484e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800484e:	697b      	ldr	r3, [r7, #20]
	}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	@ 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	@ 0x30
 800485c:	af04      	add	r7, sp, #16
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4618      	mov	r0, r3
 800486e:	f001 fc7d 	bl	800616c <pvPortMalloc>
 8004872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00e      	beq.n	8004898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800487a:	20a8      	movs	r0, #168	@ 0xa8
 800487c:	f001 fc76 	bl	800616c <pvPortMalloc>
 8004880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
 800488e:	e005      	b.n	800489c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004890:	6978      	ldr	r0, [r7, #20]
 8004892:	f001 fd39 	bl	8006308 <vPortFree>
 8004896:	e001      	b.n	800489c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d017      	beq.n	80048d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	2300      	movs	r3, #0
 80048ae:	9303      	str	r3, [sp, #12]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	9302      	str	r3, [sp, #8]
 80048b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f80f 	bl	80048e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048c6:	69f8      	ldr	r0, [r7, #28]
 80048c8:	f000 f8b4 	bl	8004a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048cc:	2301      	movs	r3, #1
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e002      	b.n	80048d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048d8:	69bb      	ldr	r3, [r7, #24]
	}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	461a      	mov	r2, r3
 80048fc:	21a5      	movs	r1, #165	@ 0xa5
 80048fe:	f001 fe23 	bl	8006548 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800490c:	3b01      	subs	r3, #1
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f023 0307 	bic.w	r3, r3, #7
 800491a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	617b      	str	r3, [r7, #20]
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	e7fd      	b.n	800493a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01f      	beq.n	8004984 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	e012      	b.n	8004970 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	7819      	ldrb	r1, [r3, #0]
 8004952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	4413      	add	r3, r2
 8004958:	3334      	adds	r3, #52	@ 0x34
 800495a:	460a      	mov	r2, r1
 800495c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b0f      	cmp	r3, #15
 8004974:	d9e9      	bls.n	800494a <prvInitialiseNewTask+0x66>
 8004976:	e000      	b.n	800497a <prvInitialiseNewTask+0x96>
			{
				break;
 8004978:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004982:	e003      	b.n	800498c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	2b37      	cmp	r3, #55	@ 0x37
 8004990:	d901      	bls.n	8004996 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004992:	2337      	movs	r3, #55	@ 0x37
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800499a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	2200      	movs	r2, #0
 80049a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	3304      	adds	r3, #4
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff f86d 	bl	8003a8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	3318      	adds	r3, #24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff f868 	bl	8003a8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	3354      	adds	r3, #84	@ 0x54
 80049e6:	224c      	movs	r2, #76	@ 0x4c
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 fdac 	bl	8006548 <memset>
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004a28 <prvInitialiseNewTask+0x144>)
 80049f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	4a0c      	ldr	r2, [pc, #48]	@ (8004a2c <prvInitialiseNewTask+0x148>)
 80049fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004a30 <prvInitialiseNewTask+0x14c>)
 8004a00:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	68f9      	ldr	r1, [r7, #12]
 8004a06:	69b8      	ldr	r0, [r7, #24]
 8004a08:	f001 f95a 	bl	8005cc0 <pxPortInitialiseStack>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a1e:	bf00      	nop
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20001b08 	.word	0x20001b08
 8004a2c:	20001b70 	.word	0x20001b70
 8004a30:	20001bd8 	.word	0x20001bd8

08004a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a3c:	f001 fa74 	bl	8005f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a40:	4b2d      	ldr	r3, [pc, #180]	@ (8004af8 <prvAddNewTaskToReadyList+0xc4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a2c      	ldr	r2, [pc, #176]	@ (8004af8 <prvAddNewTaskToReadyList+0xc4>)
 8004a48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004afc <prvAddNewTaskToReadyList+0xc8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a52:	4a2a      	ldr	r2, [pc, #168]	@ (8004afc <prvAddNewTaskToReadyList+0xc8>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a58:	4b27      	ldr	r3, [pc, #156]	@ (8004af8 <prvAddNewTaskToReadyList+0xc4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d110      	bne.n	8004a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a60:	f000 fc2e 	bl	80052c0 <prvInitialiseTaskLists>
 8004a64:	e00d      	b.n	8004a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a66:	4b26      	ldr	r3, [pc, #152]	@ (8004b00 <prvAddNewTaskToReadyList+0xcc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a6e:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <prvAddNewTaskToReadyList+0xc8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d802      	bhi.n	8004a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004afc <prvAddNewTaskToReadyList+0xc8>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a82:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <prvAddNewTaskToReadyList+0xd0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3301      	adds	r3, #1
 8004a88:	4a1e      	ldr	r2, [pc, #120]	@ (8004b04 <prvAddNewTaskToReadyList+0xd0>)
 8004a8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <prvAddNewTaskToReadyList+0xd0>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a98:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <prvAddNewTaskToReadyList+0xd4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d903      	bls.n	8004aa8 <prvAddNewTaskToReadyList+0x74>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa4:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <prvAddNewTaskToReadyList+0xd4>)
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <prvAddNewTaskToReadyList+0xd8>)
 8004ab6:	441a      	add	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fe fff1 	bl	8003aa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ac4:	f001 fa62 	bl	8005f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <prvAddNewTaskToReadyList+0xcc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00e      	beq.n	8004aee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <prvAddNewTaskToReadyList+0xc8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d207      	bcs.n	8004aee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ade:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <prvAddNewTaskToReadyList+0xdc>)
 8004ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000dd0 	.word	0x20000dd0
 8004afc:	200008fc 	.word	0x200008fc
 8004b00:	20000ddc 	.word	0x20000ddc
 8004b04:	20000dec 	.word	0x20000dec
 8004b08:	20000dd8 	.word	0x20000dd8
 8004b0c:	20000900 	.word	0x20000900
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b26:	4b14      	ldr	r3, [pc, #80]	@ (8004b78 <vTaskDelay+0x64>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <vTaskDelay+0x32>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	60bb      	str	r3, [r7, #8]
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b46:	f000 f88b 	bl	8004c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fd09 	bl	8005564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b52:	f000 f893 	bl	8004c7c <xTaskResumeAll>
 8004b56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b5e:	4b07      	ldr	r3, [pc, #28]	@ (8004b7c <vTaskDelay+0x68>)
 8004b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000df8 	.word	0x20000df8
 8004b7c:	e000ed04 	.word	0xe000ed04

08004b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	@ 0x28
 8004b84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b8e:	463a      	mov	r2, r7
 8004b90:	1d39      	adds	r1, r7, #4
 8004b92:	f107 0308 	add.w	r3, r7, #8
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe ff24 	bl	80039e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b9c:	6839      	ldr	r1, [r7, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	9202      	str	r2, [sp, #8]
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	2300      	movs	r3, #0
 8004bac:	460a      	mov	r2, r1
 8004bae:	4924      	ldr	r1, [pc, #144]	@ (8004c40 <vTaskStartScheduler+0xc0>)
 8004bb0:	4824      	ldr	r0, [pc, #144]	@ (8004c44 <vTaskStartScheduler+0xc4>)
 8004bb2:	f7ff fdf1 	bl	8004798 <xTaskCreateStatic>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4a23      	ldr	r2, [pc, #140]	@ (8004c48 <vTaskStartScheduler+0xc8>)
 8004bba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bbc:	4b22      	ldr	r3, [pc, #136]	@ (8004c48 <vTaskStartScheduler+0xc8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e001      	b.n	8004bce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d102      	bne.n	8004bda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bd4:	f000 fd1a 	bl	800560c <xTimerCreateTimerTask>
 8004bd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d11b      	bne.n	8004c18 <vTaskStartScheduler+0x98>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	613b      	str	r3, [r7, #16]
}
 8004bf2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bf4:	4b15      	ldr	r3, [pc, #84]	@ (8004c4c <vTaskStartScheduler+0xcc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3354      	adds	r3, #84	@ 0x54
 8004bfa:	4a15      	ldr	r2, [pc, #84]	@ (8004c50 <vTaskStartScheduler+0xd0>)
 8004bfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bfe:	4b15      	ldr	r3, [pc, #84]	@ (8004c54 <vTaskStartScheduler+0xd4>)
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c06:	4b14      	ldr	r3, [pc, #80]	@ (8004c58 <vTaskStartScheduler+0xd8>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c0c:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <vTaskStartScheduler+0xdc>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c12:	f001 f8e5 	bl	8005de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c16:	e00f      	b.n	8004c38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c1e:	d10b      	bne.n	8004c38 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <vTaskStartScheduler+0xb4>
}
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	0800677c 	.word	0x0800677c
 8004c44:	08005291 	.word	0x08005291
 8004c48:	20000df4 	.word	0x20000df4
 8004c4c:	200008fc 	.word	0x200008fc
 8004c50:	20000018 	.word	0x20000018
 8004c54:	20000df0 	.word	0x20000df0
 8004c58:	20000ddc 	.word	0x20000ddc
 8004c5c:	20000dd4 	.word	0x20000dd4

08004c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c64:	4b04      	ldr	r3, [pc, #16]	@ (8004c78 <vTaskSuspendAll+0x18>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	4a03      	ldr	r2, [pc, #12]	@ (8004c78 <vTaskSuspendAll+0x18>)
 8004c6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000df8 	.word	0x20000df8

08004c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c8a:	4b42      	ldr	r3, [pc, #264]	@ (8004d94 <xTaskResumeAll+0x118>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <xTaskResumeAll+0x2e>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	603b      	str	r3, [r7, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	e7fd      	b.n	8004ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004caa:	f001 f93d 	bl	8005f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cae:	4b39      	ldr	r3, [pc, #228]	@ (8004d94 <xTaskResumeAll+0x118>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	4a37      	ldr	r2, [pc, #220]	@ (8004d94 <xTaskResumeAll+0x118>)
 8004cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb8:	4b36      	ldr	r3, [pc, #216]	@ (8004d94 <xTaskResumeAll+0x118>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d162      	bne.n	8004d86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cc0:	4b35      	ldr	r3, [pc, #212]	@ (8004d98 <xTaskResumeAll+0x11c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d05e      	beq.n	8004d86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cc8:	e02f      	b.n	8004d2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cca:	4b34      	ldr	r3, [pc, #208]	@ (8004d9c <xTaskResumeAll+0x120>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3318      	adds	r3, #24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe ff42 	bl	8003b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe ff3d 	bl	8003b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cea:	4b2d      	ldr	r3, [pc, #180]	@ (8004da0 <xTaskResumeAll+0x124>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d903      	bls.n	8004cfa <xTaskResumeAll+0x7e>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8004da0 <xTaskResumeAll+0x124>)
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a27      	ldr	r2, [pc, #156]	@ (8004da4 <xTaskResumeAll+0x128>)
 8004d08:	441a      	add	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7fe fec8 	bl	8003aa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1a:	4b23      	ldr	r3, [pc, #140]	@ (8004da8 <xTaskResumeAll+0x12c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004d24:	4b21      	ldr	r3, [pc, #132]	@ (8004dac <xTaskResumeAll+0x130>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d9c <xTaskResumeAll+0x120>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1cb      	bne.n	8004cca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d38:	f000 fb66 	bl	8005408 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004db0 <xTaskResumeAll+0x134>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d010      	beq.n	8004d6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d48:	f000 f846 	bl	8004dd8 <xTaskIncrementTick>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004d52:	4b16      	ldr	r3, [pc, #88]	@ (8004dac <xTaskResumeAll+0x130>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f1      	bne.n	8004d48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004d64:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <xTaskResumeAll+0x134>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <xTaskResumeAll+0x130>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d76:	4b0f      	ldr	r3, [pc, #60]	@ (8004db4 <xTaskResumeAll+0x138>)
 8004d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d86:	f001 f901 	bl	8005f8c <vPortExitCritical>

	return xAlreadyYielded;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000df8 	.word	0x20000df8
 8004d98:	20000dd0 	.word	0x20000dd0
 8004d9c:	20000d90 	.word	0x20000d90
 8004da0:	20000dd8 	.word	0x20000dd8
 8004da4:	20000900 	.word	0x20000900
 8004da8:	200008fc 	.word	0x200008fc
 8004dac:	20000de4 	.word	0x20000de4
 8004db0:	20000de0 	.word	0x20000de0
 8004db4:	e000ed04 	.word	0xe000ed04

08004db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004dbe:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <xTaskGetTickCount+0x1c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dc4:	687b      	ldr	r3, [r7, #4]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000dd4 	.word	0x20000dd4

08004dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004de2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f20 <xTaskIncrementTick+0x148>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f040 8090 	bne.w	8004f0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004dec:	4b4d      	ldr	r3, [pc, #308]	@ (8004f24 <xTaskIncrementTick+0x14c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3301      	adds	r3, #1
 8004df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004df4:	4a4b      	ldr	r2, [pc, #300]	@ (8004f24 <xTaskIncrementTick+0x14c>)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d121      	bne.n	8004e44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e00:	4b49      	ldr	r3, [pc, #292]	@ (8004f28 <xTaskIncrementTick+0x150>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00b      	beq.n	8004e22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	603b      	str	r3, [r7, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	e7fd      	b.n	8004e1e <xTaskIncrementTick+0x46>
 8004e22:	4b41      	ldr	r3, [pc, #260]	@ (8004f28 <xTaskIncrementTick+0x150>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	4b40      	ldr	r3, [pc, #256]	@ (8004f2c <xTaskIncrementTick+0x154>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8004f28 <xTaskIncrementTick+0x150>)
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	4a3e      	ldr	r2, [pc, #248]	@ (8004f2c <xTaskIncrementTick+0x154>)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b3e      	ldr	r3, [pc, #248]	@ (8004f30 <xTaskIncrementTick+0x158>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f30 <xTaskIncrementTick+0x158>)
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	f000 fae2 	bl	8005408 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e44:	4b3b      	ldr	r3, [pc, #236]	@ (8004f34 <xTaskIncrementTick+0x15c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d349      	bcc.n	8004ee2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e4e:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <xTaskIncrementTick+0x150>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e58:	4b36      	ldr	r3, [pc, #216]	@ (8004f34 <xTaskIncrementTick+0x15c>)
 8004e5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e5e:	601a      	str	r2, [r3, #0]
					break;
 8004e60:	e03f      	b.n	8004ee2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e62:	4b31      	ldr	r3, [pc, #196]	@ (8004f28 <xTaskIncrementTick+0x150>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d203      	bcs.n	8004e82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f34 <xTaskIncrementTick+0x15c>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e80:	e02f      	b.n	8004ee2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe fe6a 	bl	8003b60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	3318      	adds	r3, #24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe fe61 	bl	8003b60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea2:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <xTaskIncrementTick+0x160>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d903      	bls.n	8004eb2 <xTaskIncrementTick+0xda>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eae:	4a22      	ldr	r2, [pc, #136]	@ (8004f38 <xTaskIncrementTick+0x160>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8004f3c <xTaskIncrementTick+0x164>)
 8004ec0:	441a      	add	r2, r3
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fe fdec 	bl	8003aa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <xTaskIncrementTick+0x168>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d3b8      	bcc.n	8004e4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ee0:	e7b5      	b.n	8004e4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ee2:	4b17      	ldr	r3, [pc, #92]	@ (8004f40 <xTaskIncrementTick+0x168>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee8:	4914      	ldr	r1, [pc, #80]	@ (8004f3c <xTaskIncrementTick+0x164>)
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d901      	bls.n	8004efe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004efa:	2301      	movs	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004efe:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <xTaskIncrementTick+0x16c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004f06:	2301      	movs	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e004      	b.n	8004f16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f48 <xTaskIncrementTick+0x170>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	4a0d      	ldr	r2, [pc, #52]	@ (8004f48 <xTaskIncrementTick+0x170>)
 8004f14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f16:	697b      	ldr	r3, [r7, #20]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000df8 	.word	0x20000df8
 8004f24:	20000dd4 	.word	0x20000dd4
 8004f28:	20000d88 	.word	0x20000d88
 8004f2c:	20000d8c 	.word	0x20000d8c
 8004f30:	20000de8 	.word	0x20000de8
 8004f34:	20000df0 	.word	0x20000df0
 8004f38:	20000dd8 	.word	0x20000dd8
 8004f3c:	20000900 	.word	0x20000900
 8004f40:	200008fc 	.word	0x200008fc
 8004f44:	20000de4 	.word	0x20000de4
 8004f48:	20000de0 	.word	0x20000de0

08004f4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f52:	4b2b      	ldr	r3, [pc, #172]	@ (8005000 <vTaskSwitchContext+0xb4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005004 <vTaskSwitchContext+0xb8>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f60:	e047      	b.n	8004ff2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004f62:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <vTaskSwitchContext+0xb8>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f68:	4b27      	ldr	r3, [pc, #156]	@ (8005008 <vTaskSwitchContext+0xbc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e011      	b.n	8004f94 <vTaskSwitchContext+0x48>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10b      	bne.n	8004f8e <vTaskSwitchContext+0x42>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	607b      	str	r3, [r7, #4]
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	e7fd      	b.n	8004f8a <vTaskSwitchContext+0x3e>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	491d      	ldr	r1, [pc, #116]	@ (800500c <vTaskSwitchContext+0xc0>)
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0e3      	beq.n	8004f70 <vTaskSwitchContext+0x24>
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4a16      	ldr	r2, [pc, #88]	@ (800500c <vTaskSwitchContext+0xc0>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d104      	bne.n	8004fd8 <vTaskSwitchContext+0x8c>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4a0c      	ldr	r2, [pc, #48]	@ (8005010 <vTaskSwitchContext+0xc4>)
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4a09      	ldr	r2, [pc, #36]	@ (8005008 <vTaskSwitchContext+0xbc>)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fe8:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <vTaskSwitchContext+0xc4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3354      	adds	r3, #84	@ 0x54
 8004fee:	4a09      	ldr	r2, [pc, #36]	@ (8005014 <vTaskSwitchContext+0xc8>)
 8004ff0:	6013      	str	r3, [r2, #0]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000df8 	.word	0x20000df8
 8005004:	20000de4 	.word	0x20000de4
 8005008:	20000dd8 	.word	0x20000dd8
 800500c:	20000900 	.word	0x20000900
 8005010:	200008fc 	.word	0x200008fc
 8005014:	20000018 	.word	0x20000018

08005018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	60fb      	str	r3, [r7, #12]
}
 800503a:	bf00      	nop
 800503c:	bf00      	nop
 800503e:	e7fd      	b.n	800503c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005040:	4b07      	ldr	r3, [pc, #28]	@ (8005060 <vTaskPlaceOnEventList+0x48>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3318      	adds	r3, #24
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fe fd50 	bl	8003aee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800504e:	2101      	movs	r1, #1
 8005050:	6838      	ldr	r0, [r7, #0]
 8005052:	f000 fa87 	bl	8005564 <prvAddCurrentTaskToDelayedList>
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	200008fc 	.word	0x200008fc

08005064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	617b      	str	r3, [r7, #20]
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	e7fd      	b.n	800508a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800508e:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3318      	adds	r3, #24
 8005094:	4619      	mov	r1, r3
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7fe fd05 	bl	8003aa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	68b8      	ldr	r0, [r7, #8]
 80050ac:	f000 fa5a 	bl	8005564 <prvAddCurrentTaskToDelayedList>
	}
 80050b0:	bf00      	nop
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	200008fc 	.word	0x200008fc

080050bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	60fb      	str	r3, [r7, #12]
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop
 80050e8:	e7fd      	b.n	80050e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3318      	adds	r3, #24
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fe fd36 	bl	8003b60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050f4:	4b1d      	ldr	r3, [pc, #116]	@ (800516c <xTaskRemoveFromEventList+0xb0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d11d      	bne.n	8005138 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	3304      	adds	r3, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f7fe fd2d 	bl	8003b60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510a:	4b19      	ldr	r3, [pc, #100]	@ (8005170 <xTaskRemoveFromEventList+0xb4>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d903      	bls.n	800511a <xTaskRemoveFromEventList+0x5e>
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	4a16      	ldr	r2, [pc, #88]	@ (8005170 <xTaskRemoveFromEventList+0xb4>)
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <xTaskRemoveFromEventList+0xb8>)
 8005128:	441a      	add	r2, r3
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7fe fcb8 	bl	8003aa6 <vListInsertEnd>
 8005136:	e005      	b.n	8005144 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	3318      	adds	r3, #24
 800513c:	4619      	mov	r1, r3
 800513e:	480e      	ldr	r0, [pc, #56]	@ (8005178 <xTaskRemoveFromEventList+0xbc>)
 8005140:	f7fe fcb1 	bl	8003aa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005148:	4b0c      	ldr	r3, [pc, #48]	@ (800517c <xTaskRemoveFromEventList+0xc0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	429a      	cmp	r2, r3
 8005150:	d905      	bls.n	800515e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005152:	2301      	movs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005156:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <xTaskRemoveFromEventList+0xc4>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e001      	b.n	8005162 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005162:	697b      	ldr	r3, [r7, #20]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000df8 	.word	0x20000df8
 8005170:	20000dd8 	.word	0x20000dd8
 8005174:	20000900 	.word	0x20000900
 8005178:	20000d90 	.word	0x20000d90
 800517c:	200008fc 	.word	0x200008fc
 8005180:	20000de4 	.word	0x20000de4

08005184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800518c:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <vTaskInternalSetTimeOutState+0x24>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005194:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <vTaskInternalSetTimeOutState+0x28>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	605a      	str	r2, [r3, #4]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	20000de8 	.word	0x20000de8
 80051ac:	20000dd4 	.word	0x20000dd4

080051b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	613b      	str	r3, [r7, #16]
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60fb      	str	r3, [r7, #12]
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	e7fd      	b.n	80051f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80051f6:	f000 fe97 	bl	8005f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005270 <xTaskCheckForTimeOut+0xc0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005212:	d102      	bne.n	800521a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005214:	2300      	movs	r3, #0
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	e023      	b.n	8005262 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <xTaskCheckForTimeOut+0xc4>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d007      	beq.n	8005236 <xTaskCheckForTimeOut+0x86>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005230:	2301      	movs	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e015      	b.n	8005262 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	429a      	cmp	r2, r3
 800523e:	d20b      	bcs.n	8005258 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ff99 	bl	8005184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005252:	2300      	movs	r3, #0
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	e004      	b.n	8005262 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800525e:	2301      	movs	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005262:	f000 fe93 	bl	8005f8c <vPortExitCritical>

	return xReturn;
 8005266:	69fb      	ldr	r3, [r7, #28]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000dd4 	.word	0x20000dd4
 8005274:	20000de8 	.word	0x20000de8

08005278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800527c:	4b03      	ldr	r3, [pc, #12]	@ (800528c <vTaskMissedYield+0x14>)
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	20000de4 	.word	0x20000de4

08005290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005298:	f000 f852 	bl	8005340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <prvIdleTask+0x28>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d9f9      	bls.n	8005298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052a4:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <prvIdleTask+0x2c>)
 80052a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80052b4:	e7f0      	b.n	8005298 <prvIdleTask+0x8>
 80052b6:	bf00      	nop
 80052b8:	20000900 	.word	0x20000900
 80052bc:	e000ed04 	.word	0xe000ed04

080052c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052c6:	2300      	movs	r3, #0
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	e00c      	b.n	80052e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4a12      	ldr	r2, [pc, #72]	@ (8005320 <prvInitialiseTaskLists+0x60>)
 80052d8:	4413      	add	r3, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe fbb6 	bl	8003a4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3301      	adds	r3, #1
 80052e4:	607b      	str	r3, [r7, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b37      	cmp	r3, #55	@ 0x37
 80052ea:	d9ef      	bls.n	80052cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052ec:	480d      	ldr	r0, [pc, #52]	@ (8005324 <prvInitialiseTaskLists+0x64>)
 80052ee:	f7fe fbad 	bl	8003a4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052f2:	480d      	ldr	r0, [pc, #52]	@ (8005328 <prvInitialiseTaskLists+0x68>)
 80052f4:	f7fe fbaa 	bl	8003a4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052f8:	480c      	ldr	r0, [pc, #48]	@ (800532c <prvInitialiseTaskLists+0x6c>)
 80052fa:	f7fe fba7 	bl	8003a4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052fe:	480c      	ldr	r0, [pc, #48]	@ (8005330 <prvInitialiseTaskLists+0x70>)
 8005300:	f7fe fba4 	bl	8003a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005304:	480b      	ldr	r0, [pc, #44]	@ (8005334 <prvInitialiseTaskLists+0x74>)
 8005306:	f7fe fba1 	bl	8003a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800530a:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <prvInitialiseTaskLists+0x78>)
 800530c:	4a05      	ldr	r2, [pc, #20]	@ (8005324 <prvInitialiseTaskLists+0x64>)
 800530e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005310:	4b0a      	ldr	r3, [pc, #40]	@ (800533c <prvInitialiseTaskLists+0x7c>)
 8005312:	4a05      	ldr	r2, [pc, #20]	@ (8005328 <prvInitialiseTaskLists+0x68>)
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20000900 	.word	0x20000900
 8005324:	20000d60 	.word	0x20000d60
 8005328:	20000d74 	.word	0x20000d74
 800532c:	20000d90 	.word	0x20000d90
 8005330:	20000da4 	.word	0x20000da4
 8005334:	20000dbc 	.word	0x20000dbc
 8005338:	20000d88 	.word	0x20000d88
 800533c:	20000d8c 	.word	0x20000d8c

08005340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005346:	e019      	b.n	800537c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005348:	f000 fdee 	bl	8005f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534c:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <prvCheckTasksWaitingTermination+0x50>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fc01 	bl	8003b60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800535e:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <prvCheckTasksWaitingTermination+0x54>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3b01      	subs	r3, #1
 8005364:	4a0b      	ldr	r2, [pc, #44]	@ (8005394 <prvCheckTasksWaitingTermination+0x54>)
 8005366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005368:	4b0b      	ldr	r3, [pc, #44]	@ (8005398 <prvCheckTasksWaitingTermination+0x58>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3b01      	subs	r3, #1
 800536e:	4a0a      	ldr	r2, [pc, #40]	@ (8005398 <prvCheckTasksWaitingTermination+0x58>)
 8005370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005372:	f000 fe0b 	bl	8005f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f810 	bl	800539c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800537c:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <prvCheckTasksWaitingTermination+0x58>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e1      	bne.n	8005348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000da4 	.word	0x20000da4
 8005394:	20000dd0 	.word	0x20000dd0
 8005398:	20000db8 	.word	0x20000db8

0800539c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3354      	adds	r3, #84	@ 0x54
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 f8d5 	bl	8006558 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d108      	bne.n	80053ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 ffa3 	bl	8006308 <vPortFree>
				vPortFree( pxTCB );
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 ffa0 	bl	8006308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053c8:	e019      	b.n	80053fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d103      	bne.n	80053dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 ff97 	bl	8006308 <vPortFree>
	}
 80053da:	e010      	b.n	80053fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d00b      	beq.n	80053fe <prvDeleteTCB+0x62>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60fb      	str	r3, [r7, #12]
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	e7fd      	b.n	80053fa <prvDeleteTCB+0x5e>
	}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800540e:	4b0c      	ldr	r3, [pc, #48]	@ (8005440 <prvResetNextTaskUnblockTime+0x38>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <prvResetNextTaskUnblockTime+0x3c>)
 800541a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800541e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005420:	e008      	b.n	8005434 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005422:	4b07      	ldr	r3, [pc, #28]	@ (8005440 <prvResetNextTaskUnblockTime+0x38>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <prvResetNextTaskUnblockTime+0x3c>)
 8005432:	6013      	str	r3, [r2, #0]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	20000d88 	.word	0x20000d88
 8005444:	20000df0 	.word	0x20000df0

08005448 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800544e:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <xTaskGetSchedulerState+0x34>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005456:	2301      	movs	r3, #1
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	e008      	b.n	800546e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800545c:	4b08      	ldr	r3, [pc, #32]	@ (8005480 <xTaskGetSchedulerState+0x38>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d102      	bne.n	800546a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005464:	2302      	movs	r3, #2
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	e001      	b.n	800546e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800546a:	2300      	movs	r3, #0
 800546c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800546e:	687b      	ldr	r3, [r7, #4]
	}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	20000ddc 	.word	0x20000ddc
 8005480:	20000df8 	.word	0x20000df8

08005484 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d058      	beq.n	800554c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800549a:	4b2f      	ldr	r3, [pc, #188]	@ (8005558 <xTaskPriorityDisinherit+0xd4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d00b      	beq.n	80054bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	60fb      	str	r3, [r7, #12]
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	e7fd      	b.n	80054b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60bb      	str	r3, [r7, #8]
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	e7fd      	b.n	80054d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e0:	1e5a      	subs	r2, r3, #1
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d02c      	beq.n	800554c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d128      	bne.n	800554c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fb2e 	bl	8003b60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551c:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <xTaskPriorityDisinherit+0xd8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d903      	bls.n	800552c <xTaskPriorityDisinherit+0xa8>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	4a0c      	ldr	r2, [pc, #48]	@ (800555c <xTaskPriorityDisinherit+0xd8>)
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4a09      	ldr	r2, [pc, #36]	@ (8005560 <xTaskPriorityDisinherit+0xdc>)
 800553a:	441a      	add	r2, r3
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f7fe faaf 	bl	8003aa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005548:	2301      	movs	r3, #1
 800554a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800554c:	697b      	ldr	r3, [r7, #20]
	}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	200008fc 	.word	0x200008fc
 800555c:	20000dd8 	.word	0x20000dd8
 8005560:	20000900 	.word	0x20000900

08005564 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800556e:	4b21      	ldr	r3, [pc, #132]	@ (80055f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005574:	4b20      	ldr	r3, [pc, #128]	@ (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3304      	adds	r3, #4
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe faf0 	bl	8003b60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005586:	d10a      	bne.n	800559e <prvAddCurrentTaskToDelayedList+0x3a>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800558e:	4b1a      	ldr	r3, [pc, #104]	@ (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4819      	ldr	r0, [pc, #100]	@ (80055fc <prvAddCurrentTaskToDelayedList+0x98>)
 8005598:	f7fe fa85 	bl	8003aa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800559c:	e026      	b.n	80055ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055a6:	4b14      	ldr	r3, [pc, #80]	@ (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d209      	bcs.n	80055ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b6:	4b12      	ldr	r3, [pc, #72]	@ (8005600 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b0f      	ldr	r3, [pc, #60]	@ (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fe fa93 	bl	8003aee <vListInsert>
}
 80055c8:	e010      	b.n	80055ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <prvAddCurrentTaskToDelayedList+0xa0>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f7fe fa89 	bl	8003aee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d202      	bcs.n	80055ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80055e6:	4a08      	ldr	r2, [pc, #32]	@ (8005608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6013      	str	r3, [r2, #0]
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000dd4 	.word	0x20000dd4
 80055f8:	200008fc 	.word	0x200008fc
 80055fc:	20000dbc 	.word	0x20000dbc
 8005600:	20000d8c 	.word	0x20000d8c
 8005604:	20000d88 	.word	0x20000d88
 8005608:	20000df0 	.word	0x20000df0

0800560c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	@ 0x28
 8005610:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005616:	f000 fb13 	bl	8005c40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800561a:	4b1d      	ldr	r3, [pc, #116]	@ (8005690 <xTimerCreateTimerTask+0x84>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d021      	beq.n	8005666 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800562a:	1d3a      	adds	r2, r7, #4
 800562c:	f107 0108 	add.w	r1, r7, #8
 8005630:	f107 030c 	add.w	r3, r7, #12
 8005634:	4618      	mov	r0, r3
 8005636:	f7fe f9ef 	bl	8003a18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	9202      	str	r2, [sp, #8]
 8005642:	9301      	str	r3, [sp, #4]
 8005644:	2302      	movs	r3, #2
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	2300      	movs	r3, #0
 800564a:	460a      	mov	r2, r1
 800564c:	4911      	ldr	r1, [pc, #68]	@ (8005694 <xTimerCreateTimerTask+0x88>)
 800564e:	4812      	ldr	r0, [pc, #72]	@ (8005698 <xTimerCreateTimerTask+0x8c>)
 8005650:	f7ff f8a2 	bl	8004798 <xTaskCreateStatic>
 8005654:	4603      	mov	r3, r0
 8005656:	4a11      	ldr	r2, [pc, #68]	@ (800569c <xTimerCreateTimerTask+0x90>)
 8005658:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800565a:	4b10      	ldr	r3, [pc, #64]	@ (800569c <xTimerCreateTimerTask+0x90>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005662:	2301      	movs	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10b      	bne.n	8005684 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	613b      	str	r3, [r7, #16]
}
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	e7fd      	b.n	8005680 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005684:	697b      	ldr	r3, [r7, #20]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000e2c 	.word	0x20000e2c
 8005694:	08006784 	.word	0x08006784
 8005698:	080057d9 	.word	0x080057d9
 800569c:	20000e30 	.word	0x20000e30

080056a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	@ 0x28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	623b      	str	r3, [r7, #32]
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	e7fd      	b.n	80056cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80056d0:	4b19      	ldr	r3, [pc, #100]	@ (8005738 <xTimerGenericCommand+0x98>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02a      	beq.n	800572e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	dc18      	bgt.n	800571c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80056ea:	f7ff fead 	bl	8005448 <xTaskGetSchedulerState>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d109      	bne.n	8005708 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80056f4:	4b10      	ldr	r3, [pc, #64]	@ (8005738 <xTimerGenericCommand+0x98>)
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	f107 0110 	add.w	r1, r7, #16
 80056fc:	2300      	movs	r3, #0
 80056fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005700:	f7fe fc0c 	bl	8003f1c <xQueueGenericSend>
 8005704:	6278      	str	r0, [r7, #36]	@ 0x24
 8005706:	e012      	b.n	800572e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <xTimerGenericCommand+0x98>)
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	f107 0110 	add.w	r1, r7, #16
 8005710:	2300      	movs	r3, #0
 8005712:	2200      	movs	r2, #0
 8005714:	f7fe fc02 	bl	8003f1c <xQueueGenericSend>
 8005718:	6278      	str	r0, [r7, #36]	@ 0x24
 800571a:	e008      	b.n	800572e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800571c:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <xTimerGenericCommand+0x98>)
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	f107 0110 	add.w	r1, r7, #16
 8005724:	2300      	movs	r3, #0
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	f7fe fcfa 	bl	8004120 <xQueueGenericSendFromISR>
 800572c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005730:	4618      	mov	r0, r3
 8005732:	3728      	adds	r7, #40	@ 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000e2c 	.word	0x20000e2c

0800573c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af02      	add	r7, sp, #8
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005746:	4b23      	ldr	r3, [pc, #140]	@ (80057d4 <prvProcessExpiredTimer+0x98>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3304      	adds	r3, #4
 8005754:	4618      	mov	r0, r3
 8005756:	f7fe fa03 	bl	8003b60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d023      	beq.n	80057b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	18d1      	adds	r1, r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	6978      	ldr	r0, [r7, #20]
 8005776:	f000 f8d5 	bl	8005924 <prvInsertTimerInActiveList>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d020      	beq.n	80057c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005780:	2300      	movs	r3, #0
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	2300      	movs	r3, #0
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	2100      	movs	r1, #0
 800578a:	6978      	ldr	r0, [r7, #20]
 800578c:	f7ff ff88 	bl	80056a0 <xTimerGenericCommand>
 8005790:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d114      	bne.n	80057c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	60fb      	str	r3, [r7, #12]
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	e7fd      	b.n	80057ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	6978      	ldr	r0, [r7, #20]
 80057c8:	4798      	blx	r3
}
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000e24 	.word	0x20000e24

080057d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057e0:	f107 0308 	add.w	r3, r7, #8
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f859 	bl	800589c <prvGetNextExpireTime>
 80057ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4619      	mov	r1, r3
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f805 	bl	8005800 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80057f6:	f000 f8d7 	bl	80059a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80057fa:	bf00      	nop
 80057fc:	e7f0      	b.n	80057e0 <prvTimerTask+0x8>
	...

08005800 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800580a:	f7ff fa29 	bl	8004c60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800580e:	f107 0308 	add.w	r3, r7, #8
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f866 	bl	80058e4 <prvSampleTimeNow>
 8005818:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d130      	bne.n	8005882 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <prvProcessTimerOrBlockTask+0x3c>
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	429a      	cmp	r2, r3
 800582c:	d806      	bhi.n	800583c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800582e:	f7ff fa25 	bl	8004c7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff ff81 	bl	800573c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800583a:	e024      	b.n	8005886 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005842:	4b13      	ldr	r3, [pc, #76]	@ (8005890 <prvProcessTimerOrBlockTask+0x90>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <prvProcessTimerOrBlockTask+0x50>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <prvProcessTimerOrBlockTask+0x52>
 8005850:	2300      	movs	r3, #0
 8005852:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005854:	4b0f      	ldr	r3, [pc, #60]	@ (8005894 <prvProcessTimerOrBlockTask+0x94>)
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	4619      	mov	r1, r3
 8005862:	f7fe ff65 	bl	8004730 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005866:	f7ff fa09 	bl	8004c7c <xTaskResumeAll>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005870:	4b09      	ldr	r3, [pc, #36]	@ (8005898 <prvProcessTimerOrBlockTask+0x98>)
 8005872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
}
 8005880:	e001      	b.n	8005886 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005882:	f7ff f9fb 	bl	8004c7c <xTaskResumeAll>
}
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000e28 	.word	0x20000e28
 8005894:	20000e2c 	.word	0x20000e2c
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058a4:	4b0e      	ldr	r3, [pc, #56]	@ (80058e0 <prvGetNextExpireTime+0x44>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <prvGetNextExpireTime+0x16>
 80058ae:	2201      	movs	r2, #1
 80058b0:	e000      	b.n	80058b4 <prvGetNextExpireTime+0x18>
 80058b2:	2200      	movs	r2, #0
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d105      	bne.n	80058cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058c0:	4b07      	ldr	r3, [pc, #28]	@ (80058e0 <prvGetNextExpireTime+0x44>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	e001      	b.n	80058d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058d0:	68fb      	ldr	r3, [r7, #12]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000e24 	.word	0x20000e24

080058e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80058ec:	f7ff fa64 	bl	8004db8 <xTaskGetTickCount>
 80058f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80058f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <prvSampleTimeNow+0x3c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d205      	bcs.n	8005908 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80058fc:	f000 f93a 	bl	8005b74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e002      	b.n	800590e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800590e:	4a04      	ldr	r2, [pc, #16]	@ (8005920 <prvSampleTimeNow+0x3c>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005914:	68fb      	ldr	r3, [r7, #12]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000e34 	.word	0x20000e34

08005924 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d812      	bhi.n	8005970 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	1ad2      	subs	r2, r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	429a      	cmp	r2, r3
 8005956:	d302      	bcc.n	800595e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e01b      	b.n	8005996 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800595e:	4b10      	ldr	r3, [pc, #64]	@ (80059a0 <prvInsertTimerInActiveList+0x7c>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f7fe f8c0 	bl	8003aee <vListInsert>
 800596e:	e012      	b.n	8005996 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d206      	bcs.n	8005986 <prvInsertTimerInActiveList+0x62>
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e007      	b.n	8005996 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005986:	4b07      	ldr	r3, [pc, #28]	@ (80059a4 <prvInsertTimerInActiveList+0x80>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f7fe f8ac 	bl	8003aee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005996:	697b      	ldr	r3, [r7, #20]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000e28 	.word	0x20000e28
 80059a4:	20000e24 	.word	0x20000e24

080059a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08e      	sub	sp, #56	@ 0x38
 80059ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ae:	e0ce      	b.n	8005b4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	da19      	bge.n	80059ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059b6:	1d3b      	adds	r3, r7, #4
 80059b8:	3304      	adds	r3, #4
 80059ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	61fb      	str	r3, [r7, #28]
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	e7fd      	b.n	80059d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e0:	6850      	ldr	r0, [r2, #4]
 80059e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e4:	6892      	ldr	r2, [r2, #8]
 80059e6:	4611      	mov	r1, r2
 80059e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f2c0 80ae 	blt.w	8005b4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a00:	3304      	adds	r3, #4
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe f8ac 	bl	8003b60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a08:	463b      	mov	r3, r7
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff ff6a 	bl	80058e4 <prvSampleTimeNow>
 8005a10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	f200 8097 	bhi.w	8005b48 <prvProcessReceivedCommands+0x1a0>
 8005a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <prvProcessReceivedCommands+0x78>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a49 	.word	0x08005a49
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a49 	.word	0x08005a49
 8005a2c:	08005abf 	.word	0x08005abf
 8005a30:	08005ad3 	.word	0x08005ad3
 8005a34:	08005b1f 	.word	0x08005b1f
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005a49 	.word	0x08005a49
 8005a40:	08005abf 	.word	0x08005abf
 8005a44:	08005ad3 	.word	0x08005ad3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	18d1      	adds	r1, r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a68:	f7ff ff5c 	bl	8005924 <prvInsertTimerInActiveList>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d06c      	beq.n	8005b4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d061      	beq.n	8005b4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	441a      	add	r2, r3
 8005a90:	2300      	movs	r3, #0
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	2300      	movs	r3, #0
 8005a96:	2100      	movs	r1, #0
 8005a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a9a:	f7ff fe01 	bl	80056a0 <xTimerGenericCommand>
 8005a9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d152      	bne.n	8005b4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	61bb      	str	r3, [r7, #24]
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	e7fd      	b.n	8005aba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005acc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ad0:	e03d      	b.n	8005b4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	617b      	str	r3, [r7, #20]
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop
 8005b08:	e7fd      	b.n	8005b06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	18d1      	adds	r1, r2, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b18:	f7ff ff04 	bl	8005924 <prvInsertTimerInActiveList>
					break;
 8005b1c:	e017      	b.n	8005b4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005b2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b2e:	f000 fbeb 	bl	8006308 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b32:	e00c      	b.n	8005b4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b46:	e002      	b.n	8005b4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005b48:	bf00      	nop
 8005b4a:	e000      	b.n	8005b4e <prvProcessReceivedCommands+0x1a6>
					break;
 8005b4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b4e:	4b08      	ldr	r3, [pc, #32]	@ (8005b70 <prvProcessReceivedCommands+0x1c8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	1d39      	adds	r1, r7, #4
 8005b54:	2200      	movs	r2, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fb80 	bl	800425c <xQueueReceive>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f47f af26 	bne.w	80059b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	3730      	adds	r7, #48	@ 0x30
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000e2c 	.word	0x20000e2c

08005b74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b7a:	e049      	b.n	8005c10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c38 <prvSwitchTimerLists+0xc4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b86:	4b2c      	ldr	r3, [pc, #176]	@ (8005c38 <prvSwitchTimerLists+0xc4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fd ffe3 	bl	8003b60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d02f      	beq.n	8005c10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d90e      	bls.n	8005be0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bce:	4b1a      	ldr	r3, [pc, #104]	@ (8005c38 <prvSwitchTimerLists+0xc4>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f7fd ff88 	bl	8003aee <vListInsert>
 8005bde:	e017      	b.n	8005c10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005be0:	2300      	movs	r3, #0
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2300      	movs	r3, #0
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	2100      	movs	r1, #0
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff fd58 	bl	80056a0 <xTimerGenericCommand>
 8005bf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	603b      	str	r3, [r7, #0]
}
 8005c0a:	bf00      	nop
 8005c0c:	bf00      	nop
 8005c0e:	e7fd      	b.n	8005c0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c10:	4b09      	ldr	r3, [pc, #36]	@ (8005c38 <prvSwitchTimerLists+0xc4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1b0      	bne.n	8005b7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c1a:	4b07      	ldr	r3, [pc, #28]	@ (8005c38 <prvSwitchTimerLists+0xc4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <prvSwitchTimerLists+0xc8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a04      	ldr	r2, [pc, #16]	@ (8005c38 <prvSwitchTimerLists+0xc4>)
 8005c26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c28:	4a04      	ldr	r2, [pc, #16]	@ (8005c3c <prvSwitchTimerLists+0xc8>)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	6013      	str	r3, [r2, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000e24 	.word	0x20000e24
 8005c3c:	20000e28 	.word	0x20000e28

08005c40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c46:	f000 f96f 	bl	8005f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c4a:	4b15      	ldr	r3, [pc, #84]	@ (8005ca0 <prvCheckForValidListAndQueue+0x60>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d120      	bne.n	8005c94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c52:	4814      	ldr	r0, [pc, #80]	@ (8005ca4 <prvCheckForValidListAndQueue+0x64>)
 8005c54:	f7fd fefa 	bl	8003a4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c58:	4813      	ldr	r0, [pc, #76]	@ (8005ca8 <prvCheckForValidListAndQueue+0x68>)
 8005c5a:	f7fd fef7 	bl	8003a4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c5e:	4b13      	ldr	r3, [pc, #76]	@ (8005cac <prvCheckForValidListAndQueue+0x6c>)
 8005c60:	4a10      	ldr	r2, [pc, #64]	@ (8005ca4 <prvCheckForValidListAndQueue+0x64>)
 8005c62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c64:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <prvCheckForValidListAndQueue+0x70>)
 8005c66:	4a10      	ldr	r2, [pc, #64]	@ (8005ca8 <prvCheckForValidListAndQueue+0x68>)
 8005c68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	4b11      	ldr	r3, [pc, #68]	@ (8005cb4 <prvCheckForValidListAndQueue+0x74>)
 8005c70:	4a11      	ldr	r2, [pc, #68]	@ (8005cb8 <prvCheckForValidListAndQueue+0x78>)
 8005c72:	2110      	movs	r1, #16
 8005c74:	200a      	movs	r0, #10
 8005c76:	f7fe f807 	bl	8003c88 <xQueueGenericCreateStatic>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4a08      	ldr	r2, [pc, #32]	@ (8005ca0 <prvCheckForValidListAndQueue+0x60>)
 8005c7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c80:	4b07      	ldr	r3, [pc, #28]	@ (8005ca0 <prvCheckForValidListAndQueue+0x60>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c88:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <prvCheckForValidListAndQueue+0x60>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	490b      	ldr	r1, [pc, #44]	@ (8005cbc <prvCheckForValidListAndQueue+0x7c>)
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fcfa 	bl	8004688 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c94:	f000 f97a 	bl	8005f8c <vPortExitCritical>
}
 8005c98:	bf00      	nop
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000e2c 	.word	0x20000e2c
 8005ca4:	20000dfc 	.word	0x20000dfc
 8005ca8:	20000e10 	.word	0x20000e10
 8005cac:	20000e24 	.word	0x20000e24
 8005cb0:	20000e28 	.word	0x20000e28
 8005cb4:	20000ed8 	.word	0x20000ed8
 8005cb8:	20000e38 	.word	0x20000e38
 8005cbc:	0800678c 	.word	0x0800678c

08005cc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3b04      	subs	r3, #4
 8005cd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f023 0201 	bic.w	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3b04      	subs	r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8005d24 <pxPortInitialiseStack+0x64>)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3b14      	subs	r3, #20
 8005cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3b04      	subs	r3, #4
 8005d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f06f 0202 	mvn.w	r2, #2
 8005d0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3b20      	subs	r3, #32
 8005d14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d16:	68fb      	ldr	r3, [r7, #12]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	08005d29 	.word	0x08005d29

08005d28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d32:	4b13      	ldr	r3, [pc, #76]	@ (8005d80 <prvTaskExitError+0x58>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d3a:	d00b      	beq.n	8005d54 <prvTaskExitError+0x2c>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	60fb      	str	r3, [r7, #12]
}
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <prvTaskExitError+0x28>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	60bb      	str	r3, [r7, #8]
}
 8005d66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d68:	bf00      	nop
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0fc      	beq.n	8005d6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20000014 	.word	0x20000014
	...

08005d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d90:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <pxCurrentTCBConst2>)
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6808      	ldr	r0, [r1, #0]
 8005d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	f380 8809 	msr	PSP, r0
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f380 8811 	msr	BASEPRI, r0
 8005daa:	4770      	bx	lr
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst2>:
 8005db0:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005db8:	4808      	ldr	r0, [pc, #32]	@ (8005ddc <prvPortStartFirstTask+0x24>)
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	6800      	ldr	r0, [r0, #0]
 8005dbe:	f380 8808 	msr	MSP, r0
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8814 	msr	CONTROL, r0
 8005dca:	b662      	cpsie	i
 8005dcc:	b661      	cpsie	f
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	df00      	svc	0
 8005dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dda:	bf00      	nop
 8005ddc:	e000ed08 	.word	0xe000ed08

08005de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005de6:	4b47      	ldr	r3, [pc, #284]	@ (8005f04 <xPortStartScheduler+0x124>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a47      	ldr	r2, [pc, #284]	@ (8005f08 <xPortStartScheduler+0x128>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10b      	bne.n	8005e08 <xPortStartScheduler+0x28>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	613b      	str	r3, [r7, #16]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e08:	4b3e      	ldr	r3, [pc, #248]	@ (8005f04 <xPortStartScheduler+0x124>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f0c <xPortStartScheduler+0x12c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10b      	bne.n	8005e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60fb      	str	r3, [r7, #12]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e2a:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <xPortStartScheduler+0x130>)
 8005e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	22ff      	movs	r2, #255	@ 0xff
 8005e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	4b31      	ldr	r3, [pc, #196]	@ (8005f14 <xPortStartScheduler+0x134>)
 8005e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e52:	4b31      	ldr	r3, [pc, #196]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e54:	2207      	movs	r2, #7
 8005e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e58:	e009      	b.n	8005e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	4a2d      	ldr	r2, [pc, #180]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e76:	2b80      	cmp	r3, #128	@ 0x80
 8005e78:	d0ef      	beq.n	8005e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e7a:	4b27      	ldr	r3, [pc, #156]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1c3 0307 	rsb	r3, r3, #7
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00b      	beq.n	8005e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60bb      	str	r3, [r7, #8]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005eb0:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <xPortStartScheduler+0x138>)
 8005eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ebc:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ec8:	4b14      	ldr	r3, [pc, #80]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	@ (8005f1c <xPortStartScheduler+0x13c>)
 8005ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ed4:	f000 f8da 	bl	800608c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ed8:	4b11      	ldr	r3, [pc, #68]	@ (8005f20 <xPortStartScheduler+0x140>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ede:	f000 f8f9 	bl	80060d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ee2:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <xPortStartScheduler+0x144>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8005f24 <xPortStartScheduler+0x144>)
 8005ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005eee:	f7ff ff63 	bl	8005db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ef2:	f7ff f82b 	bl	8004f4c <vTaskSwitchContext>
	prvTaskExitError();
 8005ef6:	f7ff ff17 	bl	8005d28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	e000ed00 	.word	0xe000ed00
 8005f08:	410fc271 	.word	0x410fc271
 8005f0c:	410fc270 	.word	0x410fc270
 8005f10:	e000e400 	.word	0xe000e400
 8005f14:	20000f28 	.word	0x20000f28
 8005f18:	20000f2c 	.word	0x20000f2c
 8005f1c:	e000ed20 	.word	0xe000ed20
 8005f20:	20000014 	.word	0x20000014
 8005f24:	e000ef34 	.word	0xe000ef34

08005f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
}
 8005f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f42:	4b10      	ldr	r3, [pc, #64]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3301      	adds	r3, #1
 8005f48:	4a0e      	ldr	r2, [pc, #56]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <vPortEnterCritical+0x5c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d110      	bne.n	8005f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f54:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <vPortEnterCritical+0x60>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	603b      	str	r3, [r7, #0]
}
 8005f70:	bf00      	nop
 8005f72:	bf00      	nop
 8005f74:	e7fd      	b.n	8005f72 <vPortEnterCritical+0x4a>
	}
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000014 	.word	0x20000014
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f92:	4b12      	ldr	r3, [pc, #72]	@ (8005fdc <vPortExitCritical+0x50>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10b      	bne.n	8005fb2 <vPortExitCritical+0x26>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	607b      	str	r3, [r7, #4]
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	e7fd      	b.n	8005fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	4a08      	ldr	r2, [pc, #32]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fbc:	4b07      	ldr	r3, [pc, #28]	@ (8005fdc <vPortExitCritical+0x50>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d105      	bne.n	8005fd0 <vPortExitCritical+0x44>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f383 8811 	msr	BASEPRI, r3
}
 8005fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000014 	.word	0x20000014

08005fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005fe0:	f3ef 8009 	mrs	r0, PSP
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4b15      	ldr	r3, [pc, #84]	@ (8006040 <pxCurrentTCBConst>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	f01e 0f10 	tst.w	lr, #16
 8005ff0:	bf08      	it	eq
 8005ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006004:	f380 8811 	msr	BASEPRI, r0
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f7fe ff9c 	bl	8004f4c <vTaskSwitchContext>
 8006014:	f04f 0000 	mov.w	r0, #0
 8006018:	f380 8811 	msr	BASEPRI, r0
 800601c:	bc09      	pop	{r0, r3}
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6808      	ldr	r0, [r1, #0]
 8006022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006026:	f01e 0f10 	tst.w	lr, #16
 800602a:	bf08      	it	eq
 800602c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006030:	f380 8809 	msr	PSP, r0
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	f3af 8000 	nop.w

08006040 <pxCurrentTCBConst>:
 8006040:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
	__asm volatile
 800604e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006052:	f383 8811 	msr	BASEPRI, r3
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	f3bf 8f4f 	dsb	sy
 800605e:	607b      	str	r3, [r7, #4]
}
 8006060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006062:	f7fe feb9 	bl	8004dd8 <xTaskIncrementTick>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <xPortSysTickHandler+0x40>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	2300      	movs	r3, #0
 8006076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f383 8811 	msr	BASEPRI, r3
}
 800607e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006080:	bf00      	nop
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	4b0b      	ldr	r3, [pc, #44]	@ (80060c0 <vPortSetupTimerInterrupt+0x34>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006096:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <vPortSetupTimerInterrupt+0x38>)
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609c:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <vPortSetupTimerInterrupt+0x3c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <vPortSetupTimerInterrupt+0x40>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	099b      	lsrs	r3, r3, #6
 80060a8:	4a09      	ldr	r2, [pc, #36]	@ (80060d0 <vPortSetupTimerInterrupt+0x44>)
 80060aa:	3b01      	subs	r3, #1
 80060ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ae:	4b04      	ldr	r3, [pc, #16]	@ (80060c0 <vPortSetupTimerInterrupt+0x34>)
 80060b0:	2207      	movs	r2, #7
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	e000e010 	.word	0xe000e010
 80060c4:	e000e018 	.word	0xe000e018
 80060c8:	20000008 	.word	0x20000008
 80060cc:	10624dd3 	.word	0x10624dd3
 80060d0:	e000e014 	.word	0xe000e014

080060d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80060e4 <vPortEnableVFP+0x10>
 80060d8:	6801      	ldr	r1, [r0, #0]
 80060da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80060de:	6001      	str	r1, [r0, #0]
 80060e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e000ed88 	.word	0xe000ed88

080060e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d915      	bls.n	8006126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060fa:	4a18      	ldr	r2, [pc, #96]	@ (800615c <vPortValidateInterruptPriority+0x74>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006104:	4b16      	ldr	r3, [pc, #88]	@ (8006160 <vPortValidateInterruptPriority+0x78>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	7afa      	ldrb	r2, [r7, #11]
 800610a:	429a      	cmp	r2, r3
 800610c:	d20b      	bcs.n	8006126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	e7fd      	b.n	8006122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006126:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <vPortValidateInterruptPriority+0x7c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800612e:	4b0e      	ldr	r3, [pc, #56]	@ (8006168 <vPortValidateInterruptPriority+0x80>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d90b      	bls.n	800614e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	603b      	str	r3, [r7, #0]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <vPortValidateInterruptPriority+0x62>
	}
 800614e:	bf00      	nop
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	e000e3f0 	.word	0xe000e3f0
 8006160:	20000f28 	.word	0x20000f28
 8006164:	e000ed0c 	.word	0xe000ed0c
 8006168:	20000f2c 	.word	0x20000f2c

0800616c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	@ 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006178:	f7fe fd72 	bl	8004c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800617c:	4b5c      	ldr	r3, [pc, #368]	@ (80062f0 <pvPortMalloc+0x184>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006184:	f000 f924 	bl	80063d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006188:	4b5a      	ldr	r3, [pc, #360]	@ (80062f4 <pvPortMalloc+0x188>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4013      	ands	r3, r2
 8006190:	2b00      	cmp	r3, #0
 8006192:	f040 8095 	bne.w	80062c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01e      	beq.n	80061da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800619c:	2208      	movs	r2, #8
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4413      	add	r3, r2
 80061a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d015      	beq.n	80061da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f023 0307 	bic.w	r3, r3, #7
 80061b4:	3308      	adds	r3, #8
 80061b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f003 0307 	and.w	r3, r3, #7
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00b      	beq.n	80061da <pvPortMalloc+0x6e>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	617b      	str	r3, [r7, #20]
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	e7fd      	b.n	80061d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d06f      	beq.n	80062c0 <pvPortMalloc+0x154>
 80061e0:	4b45      	ldr	r3, [pc, #276]	@ (80062f8 <pvPortMalloc+0x18c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d86a      	bhi.n	80062c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061ea:	4b44      	ldr	r3, [pc, #272]	@ (80062fc <pvPortMalloc+0x190>)
 80061ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061ee:	4b43      	ldr	r3, [pc, #268]	@ (80062fc <pvPortMalloc+0x190>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061f4:	e004      	b.n	8006200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d903      	bls.n	8006212 <pvPortMalloc+0xa6>
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f1      	bne.n	80061f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006212:	4b37      	ldr	r3, [pc, #220]	@ (80062f0 <pvPortMalloc+0x184>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006218:	429a      	cmp	r2, r3
 800621a:	d051      	beq.n	80062c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2208      	movs	r2, #8
 8006222:	4413      	add	r3, r2
 8006224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	1ad2      	subs	r2, r2, r3
 8006236:	2308      	movs	r3, #8
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	429a      	cmp	r2, r3
 800623c:	d920      	bls.n	8006280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <pvPortMalloc+0xfc>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	613b      	str	r3, [r7, #16]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800627a:	69b8      	ldr	r0, [r7, #24]
 800627c:	f000 f90a 	bl	8006494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006280:	4b1d      	ldr	r3, [pc, #116]	@ (80062f8 <pvPortMalloc+0x18c>)
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	4a1b      	ldr	r2, [pc, #108]	@ (80062f8 <pvPortMalloc+0x18c>)
 800628c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800628e:	4b1a      	ldr	r3, [pc, #104]	@ (80062f8 <pvPortMalloc+0x18c>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b1b      	ldr	r3, [pc, #108]	@ (8006300 <pvPortMalloc+0x194>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d203      	bcs.n	80062a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800629a:	4b17      	ldr	r3, [pc, #92]	@ (80062f8 <pvPortMalloc+0x18c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a18      	ldr	r2, [pc, #96]	@ (8006300 <pvPortMalloc+0x194>)
 80062a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b13      	ldr	r3, [pc, #76]	@ (80062f4 <pvPortMalloc+0x188>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062b6:	4b13      	ldr	r3, [pc, #76]	@ (8006304 <pvPortMalloc+0x198>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3301      	adds	r3, #1
 80062bc:	4a11      	ldr	r2, [pc, #68]	@ (8006304 <pvPortMalloc+0x198>)
 80062be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062c0:	f7fe fcdc 	bl	8004c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <pvPortMalloc+0x17a>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60fb      	str	r3, [r7, #12]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <pvPortMalloc+0x176>
	return pvReturn;
 80062e6:	69fb      	ldr	r3, [r7, #28]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3728      	adds	r7, #40	@ 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20001af0 	.word	0x20001af0
 80062f4:	20001b04 	.word	0x20001b04
 80062f8:	20001af4 	.word	0x20001af4
 80062fc:	20001ae8 	.word	0x20001ae8
 8006300:	20001af8 	.word	0x20001af8
 8006304:	20001afc 	.word	0x20001afc

08006308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d04f      	beq.n	80063ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800631a:	2308      	movs	r3, #8
 800631c:	425b      	negs	r3, r3
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	4b25      	ldr	r3, [pc, #148]	@ (80063c4 <vPortFree+0xbc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10b      	bne.n	800634e <vPortFree+0x46>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <vPortFree+0x66>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	60bb      	str	r3, [r7, #8]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	4b14      	ldr	r3, [pc, #80]	@ (80063c4 <vPortFree+0xbc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01e      	beq.n	80063ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d11a      	bne.n	80063ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	4b0e      	ldr	r3, [pc, #56]	@ (80063c4 <vPortFree+0xbc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	43db      	mvns	r3, r3
 800638e:	401a      	ands	r2, r3
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006394:	f7fe fc64 	bl	8004c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4b0a      	ldr	r3, [pc, #40]	@ (80063c8 <vPortFree+0xc0>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4413      	add	r3, r2
 80063a2:	4a09      	ldr	r2, [pc, #36]	@ (80063c8 <vPortFree+0xc0>)
 80063a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063a6:	6938      	ldr	r0, [r7, #16]
 80063a8:	f000 f874 	bl	8006494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063ac:	4b07      	ldr	r3, [pc, #28]	@ (80063cc <vPortFree+0xc4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	4a06      	ldr	r2, [pc, #24]	@ (80063cc <vPortFree+0xc4>)
 80063b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063b6:	f7fe fc61 	bl	8004c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ba:	bf00      	nop
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20001b04 	.word	0x20001b04
 80063c8:	20001af4 	.word	0x20001af4
 80063cc:	20001b00 	.word	0x20001b00

080063d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80063da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063dc:	4b27      	ldr	r3, [pc, #156]	@ (800647c <prvHeapInit+0xac>)
 80063de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3307      	adds	r3, #7
 80063ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0307 	bic.w	r3, r3, #7
 80063f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	4a1f      	ldr	r2, [pc, #124]	@ (800647c <prvHeapInit+0xac>)
 8006400:	4413      	add	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006408:	4a1d      	ldr	r2, [pc, #116]	@ (8006480 <prvHeapInit+0xb0>)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800640e:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <prvHeapInit+0xb0>)
 8006410:	2200      	movs	r2, #0
 8006412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	4413      	add	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800641c:	2208      	movs	r2, #8
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0307 	bic.w	r3, r3, #7
 800642a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a15      	ldr	r2, [pc, #84]	@ (8006484 <prvHeapInit+0xb4>)
 8006430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006432:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <prvHeapInit+0xb4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800643a:	4b12      	ldr	r3, [pc, #72]	@ (8006484 <prvHeapInit+0xb4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	1ad2      	subs	r2, r2, r3
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006450:	4b0c      	ldr	r3, [pc, #48]	@ (8006484 <prvHeapInit+0xb4>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a0a      	ldr	r2, [pc, #40]	@ (8006488 <prvHeapInit+0xb8>)
 800645e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a09      	ldr	r2, [pc, #36]	@ (800648c <prvHeapInit+0xbc>)
 8006466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006468:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <prvHeapInit+0xc0>)
 800646a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800646e:	601a      	str	r2, [r3, #0]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000f30 	.word	0x20000f30
 8006480:	20001ae8 	.word	0x20001ae8
 8006484:	20001af0 	.word	0x20001af0
 8006488:	20001af8 	.word	0x20001af8
 800648c:	20001af4 	.word	0x20001af4
 8006490:	20001b04 	.word	0x20001b04

08006494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800649c:	4b28      	ldr	r3, [pc, #160]	@ (8006540 <prvInsertBlockIntoFreeList+0xac>)
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e002      	b.n	80064a8 <prvInsertBlockIntoFreeList+0x14>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d8f7      	bhi.n	80064a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	4413      	add	r3, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d108      	bne.n	80064d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	441a      	add	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	441a      	add	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d118      	bne.n	800651c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4b15      	ldr	r3, [pc, #84]	@ (8006544 <prvInsertBlockIntoFreeList+0xb0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d00d      	beq.n	8006512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	441a      	add	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e008      	b.n	8006524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006512:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <prvInsertBlockIntoFreeList+0xb0>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	e003      	b.n	8006524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	429a      	cmp	r2, r3
 800652a:	d002      	beq.n	8006532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006532:	bf00      	nop
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20001ae8 	.word	0x20001ae8
 8006544:	20001af0 	.word	0x20001af0

08006548 <memset>:
 8006548:	4402      	add	r2, r0
 800654a:	4603      	mov	r3, r0
 800654c:	4293      	cmp	r3, r2
 800654e:	d100      	bne.n	8006552 <memset+0xa>
 8006550:	4770      	bx	lr
 8006552:	f803 1b01 	strb.w	r1, [r3], #1
 8006556:	e7f9      	b.n	800654c <memset+0x4>

08006558 <_reclaim_reent>:
 8006558:	4b29      	ldr	r3, [pc, #164]	@ (8006600 <_reclaim_reent+0xa8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4283      	cmp	r3, r0
 800655e:	b570      	push	{r4, r5, r6, lr}
 8006560:	4604      	mov	r4, r0
 8006562:	d04b      	beq.n	80065fc <_reclaim_reent+0xa4>
 8006564:	69c3      	ldr	r3, [r0, #28]
 8006566:	b1ab      	cbz	r3, 8006594 <_reclaim_reent+0x3c>
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	b16b      	cbz	r3, 8006588 <_reclaim_reent+0x30>
 800656c:	2500      	movs	r5, #0
 800656e:	69e3      	ldr	r3, [r4, #28]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	5959      	ldr	r1, [r3, r5]
 8006574:	2900      	cmp	r1, #0
 8006576:	d13b      	bne.n	80065f0 <_reclaim_reent+0x98>
 8006578:	3504      	adds	r5, #4
 800657a:	2d80      	cmp	r5, #128	@ 0x80
 800657c:	d1f7      	bne.n	800656e <_reclaim_reent+0x16>
 800657e:	69e3      	ldr	r3, [r4, #28]
 8006580:	4620      	mov	r0, r4
 8006582:	68d9      	ldr	r1, [r3, #12]
 8006584:	f000 f872 	bl	800666c <_free_r>
 8006588:	69e3      	ldr	r3, [r4, #28]
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	b111      	cbz	r1, 8006594 <_reclaim_reent+0x3c>
 800658e:	4620      	mov	r0, r4
 8006590:	f000 f86c 	bl	800666c <_free_r>
 8006594:	6961      	ldr	r1, [r4, #20]
 8006596:	b111      	cbz	r1, 800659e <_reclaim_reent+0x46>
 8006598:	4620      	mov	r0, r4
 800659a:	f000 f867 	bl	800666c <_free_r>
 800659e:	69e1      	ldr	r1, [r4, #28]
 80065a0:	b111      	cbz	r1, 80065a8 <_reclaim_reent+0x50>
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 f862 	bl	800666c <_free_r>
 80065a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80065aa:	b111      	cbz	r1, 80065b2 <_reclaim_reent+0x5a>
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 f85d 	bl	800666c <_free_r>
 80065b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065b4:	b111      	cbz	r1, 80065bc <_reclaim_reent+0x64>
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 f858 	bl	800666c <_free_r>
 80065bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80065be:	b111      	cbz	r1, 80065c6 <_reclaim_reent+0x6e>
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 f853 	bl	800666c <_free_r>
 80065c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80065c8:	b111      	cbz	r1, 80065d0 <_reclaim_reent+0x78>
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f84e 	bl	800666c <_free_r>
 80065d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80065d2:	b111      	cbz	r1, 80065da <_reclaim_reent+0x82>
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 f849 	bl	800666c <_free_r>
 80065da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80065dc:	b111      	cbz	r1, 80065e4 <_reclaim_reent+0x8c>
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 f844 	bl	800666c <_free_r>
 80065e4:	6a23      	ldr	r3, [r4, #32]
 80065e6:	b14b      	cbz	r3, 80065fc <_reclaim_reent+0xa4>
 80065e8:	4620      	mov	r0, r4
 80065ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065ee:	4718      	bx	r3
 80065f0:	680e      	ldr	r6, [r1, #0]
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 f83a 	bl	800666c <_free_r>
 80065f8:	4631      	mov	r1, r6
 80065fa:	e7bb      	b.n	8006574 <_reclaim_reent+0x1c>
 80065fc:	bd70      	pop	{r4, r5, r6, pc}
 80065fe:	bf00      	nop
 8006600:	20000018 	.word	0x20000018

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	4d0d      	ldr	r5, [pc, #52]	@ (800663c <__libc_init_array+0x38>)
 8006608:	4c0d      	ldr	r4, [pc, #52]	@ (8006640 <__libc_init_array+0x3c>)
 800660a:	1b64      	subs	r4, r4, r5
 800660c:	10a4      	asrs	r4, r4, #2
 800660e:	2600      	movs	r6, #0
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	4d0b      	ldr	r5, [pc, #44]	@ (8006644 <__libc_init_array+0x40>)
 8006616:	4c0c      	ldr	r4, [pc, #48]	@ (8006648 <__libc_init_array+0x44>)
 8006618:	f000 f87e 	bl	8006718 <_init>
 800661c:	1b64      	subs	r4, r4, r5
 800661e:	10a4      	asrs	r4, r4, #2
 8006620:	2600      	movs	r6, #0
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	f855 3b04 	ldr.w	r3, [r5], #4
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	f855 3b04 	ldr.w	r3, [r5], #4
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	0800683c 	.word	0x0800683c
 8006640:	0800683c 	.word	0x0800683c
 8006644:	0800683c 	.word	0x0800683c
 8006648:	08006840 	.word	0x08006840

0800664c <__retarget_lock_acquire_recursive>:
 800664c:	4770      	bx	lr

0800664e <__retarget_lock_release_recursive>:
 800664e:	4770      	bx	lr

08006650 <memcpy>:
 8006650:	440a      	add	r2, r1
 8006652:	4291      	cmp	r1, r2
 8006654:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006658:	d100      	bne.n	800665c <memcpy+0xc>
 800665a:	4770      	bx	lr
 800665c:	b510      	push	{r4, lr}
 800665e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006666:	4291      	cmp	r1, r2
 8006668:	d1f9      	bne.n	800665e <memcpy+0xe>
 800666a:	bd10      	pop	{r4, pc}

0800666c <_free_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4605      	mov	r5, r0
 8006670:	2900      	cmp	r1, #0
 8006672:	d041      	beq.n	80066f8 <_free_r+0x8c>
 8006674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006678:	1f0c      	subs	r4, r1, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	bfb8      	it	lt
 800667e:	18e4      	addlt	r4, r4, r3
 8006680:	f000 f83e 	bl	8006700 <__malloc_lock>
 8006684:	4a1d      	ldr	r2, [pc, #116]	@ (80066fc <_free_r+0x90>)
 8006686:	6813      	ldr	r3, [r2, #0]
 8006688:	b933      	cbnz	r3, 8006698 <_free_r+0x2c>
 800668a:	6063      	str	r3, [r4, #4]
 800668c:	6014      	str	r4, [r2, #0]
 800668e:	4628      	mov	r0, r5
 8006690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006694:	f000 b83a 	b.w	800670c <__malloc_unlock>
 8006698:	42a3      	cmp	r3, r4
 800669a:	d908      	bls.n	80066ae <_free_r+0x42>
 800669c:	6820      	ldr	r0, [r4, #0]
 800669e:	1821      	adds	r1, r4, r0
 80066a0:	428b      	cmp	r3, r1
 80066a2:	bf01      	itttt	eq
 80066a4:	6819      	ldreq	r1, [r3, #0]
 80066a6:	685b      	ldreq	r3, [r3, #4]
 80066a8:	1809      	addeq	r1, r1, r0
 80066aa:	6021      	streq	r1, [r4, #0]
 80066ac:	e7ed      	b.n	800668a <_free_r+0x1e>
 80066ae:	461a      	mov	r2, r3
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	b10b      	cbz	r3, 80066b8 <_free_r+0x4c>
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	d9fa      	bls.n	80066ae <_free_r+0x42>
 80066b8:	6811      	ldr	r1, [r2, #0]
 80066ba:	1850      	adds	r0, r2, r1
 80066bc:	42a0      	cmp	r0, r4
 80066be:	d10b      	bne.n	80066d8 <_free_r+0x6c>
 80066c0:	6820      	ldr	r0, [r4, #0]
 80066c2:	4401      	add	r1, r0
 80066c4:	1850      	adds	r0, r2, r1
 80066c6:	4283      	cmp	r3, r0
 80066c8:	6011      	str	r1, [r2, #0]
 80066ca:	d1e0      	bne.n	800668e <_free_r+0x22>
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	6053      	str	r3, [r2, #4]
 80066d2:	4408      	add	r0, r1
 80066d4:	6010      	str	r0, [r2, #0]
 80066d6:	e7da      	b.n	800668e <_free_r+0x22>
 80066d8:	d902      	bls.n	80066e0 <_free_r+0x74>
 80066da:	230c      	movs	r3, #12
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	e7d6      	b.n	800668e <_free_r+0x22>
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	1821      	adds	r1, r4, r0
 80066e4:	428b      	cmp	r3, r1
 80066e6:	bf04      	itt	eq
 80066e8:	6819      	ldreq	r1, [r3, #0]
 80066ea:	685b      	ldreq	r3, [r3, #4]
 80066ec:	6063      	str	r3, [r4, #4]
 80066ee:	bf04      	itt	eq
 80066f0:	1809      	addeq	r1, r1, r0
 80066f2:	6021      	streq	r1, [r4, #0]
 80066f4:	6054      	str	r4, [r2, #4]
 80066f6:	e7ca      	b.n	800668e <_free_r+0x22>
 80066f8:	bd38      	pop	{r3, r4, r5, pc}
 80066fa:	bf00      	nop
 80066fc:	20001c44 	.word	0x20001c44

08006700 <__malloc_lock>:
 8006700:	4801      	ldr	r0, [pc, #4]	@ (8006708 <__malloc_lock+0x8>)
 8006702:	f7ff bfa3 	b.w	800664c <__retarget_lock_acquire_recursive>
 8006706:	bf00      	nop
 8006708:	20001c40 	.word	0x20001c40

0800670c <__malloc_unlock>:
 800670c:	4801      	ldr	r0, [pc, #4]	@ (8006714 <__malloc_unlock+0x8>)
 800670e:	f7ff bf9e 	b.w	800664e <__retarget_lock_release_recursive>
 8006712:	bf00      	nop
 8006714:	20001c40 	.word	0x20001c40

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
